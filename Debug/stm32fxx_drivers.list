
stm32fxx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000076c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000914  0800091c  0001091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000914  08000914  0001091c  2**0
                  CONTENTS
  4 .ARM          00000000  08000914  08000914  0001091c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000914  0800091c  0001091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000914  08000914  00010914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000918  08000918  00010918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001091c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001091c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a58  00000000  00000000  0001094c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000250  00000000  00000000  000113a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  000115f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  000116b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001ab0  00000000  00000000  00011750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f13  00000000  00000000  00013200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005b76  00000000  00000000  00014113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00019c89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000024c  00000000  00000000  00019cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080008fc 	.word	0x080008fc

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080008fc 	.word	0x080008fc

080001e8 <delay>:

#include <stdint.h>
#include "stm32fxx.h"

#define BTN_PRESSED 1
void delay(void) {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 400000; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>

}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	00061a7f 	.word	0x00061a7f

08000214 <main>:

int main(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = GPIOD;
 800021a:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <main+0x74>)
 800021c:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 800021e:	230c      	movs	r3, #12
 8000220:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000222:	2301      	movs	r3, #1
 8000224:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 8000226:	2303      	movs	r3, #3
 8000228:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800022a:	2300      	movs	r3, #0
 800022c:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.PinPuPdControl = GPIO_NO_PUPD;
 800022e:	2300      	movs	r3, #0
 8000230:	74fb      	strb	r3, [r7, #19]

	GPIO_Handle_t GpioBtn;

	GpioBtn.pGPIOx = GPIOA;
 8000232:	4b16      	ldr	r3, [pc, #88]	; (800028c <main+0x78>)
 8000234:	603b      	str	r3, [r7, #0]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000236:	2300      	movs	r3, #0
 8000238:	713b      	strb	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800023a:	2300      	movs	r3, #0
 800023c:	717b      	strb	r3, [r7, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 800023e:	2303      	movs	r3, #3
 8000240:	71bb      	strb	r3, [r7, #6]
	GpioBtn.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000242:	2300      	movs	r3, #0
 8000244:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.PinPuPdControl = GPIO_NO_PUPD;
 8000246:	2300      	movs	r3, #0
 8000248:	71fb      	strb	r3, [r7, #7]

	GPIO_PClkCtrl(GPIOD, ENABLE);
 800024a:	2101      	movs	r1, #1
 800024c:	480e      	ldr	r0, [pc, #56]	; (8000288 <main+0x74>)
 800024e:	f000 f849 	bl	80002e4 <GPIO_PClkCtrl>
	GPIO_PClkCtrl(GPIOA, ENABLE);
 8000252:	2101      	movs	r1, #1
 8000254:	480d      	ldr	r0, [pc, #52]	; (800028c <main+0x78>)
 8000256:	f000 f845 	bl	80002e4 <GPIO_PClkCtrl>

	GPIO_init(&GpioLed);
 800025a:	f107 030c 	add.w	r3, r7, #12
 800025e:	4618      	mov	r0, r3
 8000260:	f000 f958 	bl	8000514 <GPIO_init>
	GPIO_init(&GpioBtn);
 8000264:	463b      	mov	r3, r7
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f954 	bl	8000514 <GPIO_init>

	while (1) {
		if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0) == BTN_PRESSED) {
 800026c:	2100      	movs	r1, #0
 800026e:	4807      	ldr	r0, [pc, #28]	; (800028c <main+0x78>)
 8000270:	f000 faf4 	bl	800085c <GPIO_ReadFromInputPin>
 8000274:	4603      	mov	r3, r0
 8000276:	2b01      	cmp	r3, #1
 8000278:	d1f8      	bne.n	800026c <main+0x58>
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_12);
 800027a:	210c      	movs	r1, #12
 800027c:	4802      	ldr	r0, [pc, #8]	; (8000288 <main+0x74>)
 800027e:	f000 fb03 	bl	8000888 <GPIO_ToggleOutputPin>

			delay();
 8000282:	f7ff ffb1 	bl	80001e8 <delay>
		if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0) == BTN_PRESSED) {
 8000286:	e7f1      	b.n	800026c <main+0x58>
 8000288:	40020c00 	.word	0x40020c00
 800028c:	40020000 	.word	0x40020000

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000294:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490d      	ldr	r1, [pc, #52]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 faf9 	bl	80008b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ffa7 	bl	8000214 <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	0800091c 	.word	0x0800091c
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC_IRQHandler>
	...

080002e4 <GPIO_PClkCtrl>:
#include "stm32f407xx_gpio_driver.h"

/*
 * Peripheral clock control
 */
void GPIO_PClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t State) {
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	70fb      	strb	r3, [r7, #3]
	if (State == ENABLE) {
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d178      	bne.n	80003e8 <GPIO_PClkCtrl+0x104>
		if (pGPIOx == GPIOA) {
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a7a      	ldr	r2, [pc, #488]	; (80004e4 <GPIO_PClkCtrl+0x200>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_PClkCtrl+0x28>
			GPIOA_PCLK_EN();
 80002fe:	4b7a      	ldr	r3, [pc, #488]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000302:	4a79      	ldr	r2, [pc, #484]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOJ_PCLK_DI();
		} else if (pGPIOx == GPIOK) {
			GPIOK_PCLK_DI();
		}
	}
}
 800030a:	e0e5      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOB) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a77      	ldr	r2, [pc, #476]	; (80004ec <GPIO_PClkCtrl+0x208>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_PClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000314:	4b74      	ldr	r3, [pc, #464]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000318:	4a73      	ldr	r2, [pc, #460]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000320:	e0da      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOC) {
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a72      	ldr	r2, [pc, #456]	; (80004f0 <GPIO_PClkCtrl+0x20c>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PClkCtrl+0x54>
			GPIOC_PCLK_EN();
 800032a:	4b6f      	ldr	r3, [pc, #444]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	4a6e      	ldr	r2, [pc, #440]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000336:	e0cf      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOD) {
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a6e      	ldr	r2, [pc, #440]	; (80004f4 <GPIO_PClkCtrl+0x210>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_PClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 8000340:	4b69      	ldr	r3, [pc, #420]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a68      	ldr	r2, [pc, #416]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034c:	e0c4      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOE) {
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a69      	ldr	r2, [pc, #420]	; (80004f8 <GPIO_PClkCtrl+0x214>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PClkCtrl+0x80>
			GPIOE_PCLK_EN();
 8000356:	4b64      	ldr	r3, [pc, #400]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	4a63      	ldr	r2, [pc, #396]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 800035c:	f043 0310 	orr.w	r3, r3, #16
 8000360:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000362:	e0b9      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOF) {
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a65      	ldr	r2, [pc, #404]	; (80004fc <GPIO_PClkCtrl+0x218>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_PClkCtrl+0x96>
			GPIOF_PCLK_EN();
 800036c:	4b5e      	ldr	r3, [pc, #376]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a5d      	ldr	r2, [pc, #372]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000378:	e0ae      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOG) {
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a60      	ldr	r2, [pc, #384]	; (8000500 <GPIO_PClkCtrl+0x21c>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PClkCtrl+0xac>
			GPIOG_PCLK_EN();
 8000382:	4b59      	ldr	r3, [pc, #356]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a58      	ldr	r2, [pc, #352]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038e:	e0a3      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOH) {
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a5c      	ldr	r2, [pc, #368]	; (8000504 <GPIO_PClkCtrl+0x220>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PClkCtrl+0xc2>
			GPIOH_PCLK_EN();
 8000398:	4b53      	ldr	r3, [pc, #332]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a52      	ldr	r2, [pc, #328]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 800039e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a4:	e098      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOI) {
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a57      	ldr	r2, [pc, #348]	; (8000508 <GPIO_PClkCtrl+0x224>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PClkCtrl+0xd8>
			GPIOI_PCLK_EN();
 80003ae:	4b4e      	ldr	r3, [pc, #312]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a4d      	ldr	r2, [pc, #308]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80003b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e08d      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOJ) {
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a53      	ldr	r2, [pc, #332]	; (800050c <GPIO_PClkCtrl+0x228>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PClkCtrl+0xee>
			GPIOJ_PCLK_EN();
 80003c4:	4b48      	ldr	r3, [pc, #288]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a47      	ldr	r2, [pc, #284]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80003ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e082      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOK) {
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a4e      	ldr	r2, [pc, #312]	; (8000510 <GPIO_PClkCtrl+0x22c>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d17e      	bne.n	80004d8 <GPIO_PClkCtrl+0x1f4>
			GPIOK_PCLK_EN();
 80003da:	4b43      	ldr	r3, [pc, #268]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a42      	ldr	r2, [pc, #264]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80003e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	e077      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		if (pGPIOx == GPIOA) {
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a3e      	ldr	r2, [pc, #248]	; (80004e4 <GPIO_PClkCtrl+0x200>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PClkCtrl+0x11a>
			GPIOA_PCLK_DI();
 80003f0:	4b3d      	ldr	r3, [pc, #244]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a3c      	ldr	r2, [pc, #240]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80003f6:	f023 0301 	bic.w	r3, r3, #1
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e06c      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOB) {
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a3a      	ldr	r2, [pc, #232]	; (80004ec <GPIO_PClkCtrl+0x208>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PClkCtrl+0x130>
			GPIOB_PCLK_DI();
 8000406:	4b38      	ldr	r3, [pc, #224]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a37      	ldr	r2, [pc, #220]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 800040c:	f023 0302 	bic.w	r3, r3, #2
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	e061      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOC) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a36      	ldr	r2, [pc, #216]	; (80004f0 <GPIO_PClkCtrl+0x20c>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PClkCtrl+0x146>
			GPIOC_PCLK_DI();
 800041c:	4b32      	ldr	r3, [pc, #200]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a31      	ldr	r2, [pc, #196]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000422:	f023 0304 	bic.w	r3, r3, #4
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	e056      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOD) {
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a31      	ldr	r2, [pc, #196]	; (80004f4 <GPIO_PClkCtrl+0x210>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PClkCtrl+0x15c>
			GPIOD_PCLK_DI();
 8000432:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a2c      	ldr	r2, [pc, #176]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000438:	f023 0308 	bic.w	r3, r3, #8
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e04b      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOE) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a2d      	ldr	r2, [pc, #180]	; (80004f8 <GPIO_PClkCtrl+0x214>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PClkCtrl+0x172>
			GPIOE_PCLK_DI();
 8000448:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a26      	ldr	r2, [pc, #152]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 800044e:	f023 0310 	bic.w	r3, r3, #16
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	e040      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOF) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a28      	ldr	r2, [pc, #160]	; (80004fc <GPIO_PClkCtrl+0x218>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PClkCtrl+0x188>
			GPIOF_PCLK_DI();
 800045e:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a21      	ldr	r2, [pc, #132]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000464:	f023 0320 	bic.w	r3, r3, #32
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046a:	e035      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOG) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a24      	ldr	r2, [pc, #144]	; (8000500 <GPIO_PClkCtrl+0x21c>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PClkCtrl+0x19e>
			GPIOG_PCLK_DI();
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a1b      	ldr	r2, [pc, #108]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 800047a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000480:	e02a      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOH) {
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a1f      	ldr	r2, [pc, #124]	; (8000504 <GPIO_PClkCtrl+0x220>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PClkCtrl+0x1b4>
			GPIOH_PCLK_DI();
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	4a16      	ldr	r2, [pc, #88]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 8000490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000494:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000496:	e01f      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOI) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a1b      	ldr	r2, [pc, #108]	; (8000508 <GPIO_PClkCtrl+0x224>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <GPIO_PClkCtrl+0x1ca>
			GPIOI_PCLK_DI();
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	4a10      	ldr	r2, [pc, #64]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80004a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ac:	e014      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOJ) {
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a16      	ldr	r2, [pc, #88]	; (800050c <GPIO_PClkCtrl+0x228>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d106      	bne.n	80004c4 <GPIO_PClkCtrl+0x1e0>
			GPIOJ_PCLK_DI();
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80004b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ba:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80004bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c2:	e009      	b.n	80004d8 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOK) {
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a12      	ldr	r2, [pc, #72]	; (8000510 <GPIO_PClkCtrl+0x22c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d105      	bne.n	80004d8 <GPIO_PClkCtrl+0x1f4>
			GPIOK_PCLK_DI();
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80004ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d0:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <GPIO_PClkCtrl+0x204>)
 80004d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	40020000 	.word	0x40020000
 80004e8:	40023800 	.word	0x40023800
 80004ec:	40020400 	.word	0x40020400
 80004f0:	40020800 	.word	0x40020800
 80004f4:	40020c00 	.word	0x40020c00
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40021400 	.word	0x40021400
 8000500:	40021800 	.word	0x40021800
 8000504:	40021c00 	.word	0x40021c00
 8000508:	40022000 	.word	0x40022000
 800050c:	40022400 	.word	0x40022400
 8000510:	40022800 	.word	0x40022800

08000514 <GPIO_init>:

/*
 * initializing
 */
void GPIO_init(GPIO_Handle_t *pGPIOHandle) {
 8000514:	b480      	push	{r7}
 8000516:	b087      	sub	sp, #28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
	/****Configure the pin mode****/
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	795b      	ldrb	r3, [r3, #5]
 8000524:	2b03      	cmp	r3, #3
 8000526:	d820      	bhi.n	800056a <GPIO_init+0x56>
		//No interrupts are being initialized
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	795b      	ldrb	r3, [r3, #5]
 800052c:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //to populate the correct two bits in the mode register
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000538:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	681a      	ldr	r2, [r3, #0]
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	791b      	ldrb	r3, [r3, #4]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	2103      	movs	r1, #3
 8000548:	fa01 f303 	lsl.w	r3, r1, r3
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 800054c:	43db      	mvns	r3, r3
 800054e:	4619      	mov	r1, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	400a      	ands	r2, r1
 8000556:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	6819      	ldr	r1, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	430a      	orrs	r2, r1
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	e0cb      	b.n	8000702 <GPIO_init+0x1ee>
		//temp = 0;
	} else {
		//Interrupts are being initialized
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	795b      	ldrb	r3, [r3, #5]
 800056e:	2b04      	cmp	r3, #4
 8000570:	d117      	bne.n	80005a2 <GPIO_init+0x8e>
			//Falling edge trigger interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <GPIO_init+0x18c>)
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	7912      	ldrb	r2, [r2, #4]
 800057a:	4611      	mov	r1, r2
 800057c:	2201      	movs	r2, #1
 800057e:	408a      	lsls	r2, r1
 8000580:	4611      	mov	r1, r2
 8000582:	4a47      	ldr	r2, [pc, #284]	; (80006a0 <GPIO_init+0x18c>)
 8000584:	430b      	orrs	r3, r1
 8000586:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000588:	4b45      	ldr	r3, [pc, #276]	; (80006a0 <GPIO_init+0x18c>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	7912      	ldrb	r2, [r2, #4]
 8000590:	4611      	mov	r1, r2
 8000592:	2201      	movs	r2, #1
 8000594:	408a      	lsls	r2, r1
 8000596:	43d2      	mvns	r2, r2
 8000598:	4611      	mov	r1, r2
 800059a:	4a41      	ldr	r2, [pc, #260]	; (80006a0 <GPIO_init+0x18c>)
 800059c:	400b      	ands	r3, r1
 800059e:	6093      	str	r3, [r2, #8]
 80005a0:	e035      	b.n	800060e <GPIO_init+0xfa>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	795b      	ldrb	r3, [r3, #5]
 80005a6:	2b05      	cmp	r3, #5
 80005a8:	d117      	bne.n	80005da <GPIO_init+0xc6>
			//Rising edge trigger
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005aa:	4b3d      	ldr	r3, [pc, #244]	; (80006a0 <GPIO_init+0x18c>)
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7912      	ldrb	r2, [r2, #4]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a39      	ldr	r2, [pc, #228]	; (80006a0 <GPIO_init+0x18c>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c0:	4b37      	ldr	r3, [pc, #220]	; (80006a0 <GPIO_init+0x18c>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	7912      	ldrb	r2, [r2, #4]
 80005c8:	4611      	mov	r1, r2
 80005ca:	2201      	movs	r2, #1
 80005cc:	408a      	lsls	r2, r1
 80005ce:	43d2      	mvns	r2, r2
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a33      	ldr	r2, [pc, #204]	; (80006a0 <GPIO_init+0x18c>)
 80005d4:	400b      	ands	r3, r1
 80005d6:	60d3      	str	r3, [r2, #12]
 80005d8:	e019      	b.n	800060e <GPIO_init+0xfa>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	795b      	ldrb	r3, [r3, #5]
 80005de:	2b06      	cmp	r3, #6
 80005e0:	d115      	bne.n	800060e <GPIO_init+0xfa>
			//Both rising and falling edge trigger interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e2:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <GPIO_init+0x18c>)
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	7912      	ldrb	r2, [r2, #4]
 80005ea:	4611      	mov	r1, r2
 80005ec:	2201      	movs	r2, #1
 80005ee:	408a      	lsls	r2, r1
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a2b      	ldr	r2, [pc, #172]	; (80006a0 <GPIO_init+0x18c>)
 80005f4:	430b      	orrs	r3, r1
 80005f6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <GPIO_init+0x18c>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	7912      	ldrb	r2, [r2, #4]
 8000600:	4611      	mov	r1, r2
 8000602:	2201      	movs	r2, #1
 8000604:	408a      	lsls	r2, r1
 8000606:	4611      	mov	r1, r2
 8000608:	4a25      	ldr	r2, [pc, #148]	; (80006a0 <GPIO_init+0x18c>)
 800060a:	430b      	orrs	r3, r1
 800060c:	6093      	str	r3, [r2, #8]
		}

		//Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	089b      	lsrs	r3, r3, #2
 8000614:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	f003 0303 	and.w	r3, r3, #3
 800061e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <GPIO_init+0x190>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d04e      	beq.n	80006c8 <GPIO_init+0x1b4>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a1e      	ldr	r2, [pc, #120]	; (80006a8 <GPIO_init+0x194>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d032      	beq.n	800069a <GPIO_init+0x186>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1c      	ldr	r2, [pc, #112]	; (80006ac <GPIO_init+0x198>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d02b      	beq.n	8000696 <GPIO_init+0x182>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <GPIO_init+0x19c>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d024      	beq.n	8000692 <GPIO_init+0x17e>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a19      	ldr	r2, [pc, #100]	; (80006b4 <GPIO_init+0x1a0>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d01d      	beq.n	800068e <GPIO_init+0x17a>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <GPIO_init+0x1a4>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d016      	beq.n	800068a <GPIO_init+0x176>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <GPIO_init+0x1a8>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d00f      	beq.n	8000686 <GPIO_init+0x172>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a15      	ldr	r2, [pc, #84]	; (80006c0 <GPIO_init+0x1ac>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d008      	beq.n	8000682 <GPIO_init+0x16e>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <GPIO_init+0x1b0>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d101      	bne.n	800067e <GPIO_init+0x16a>
 800067a:	2308      	movs	r3, #8
 800067c:	e025      	b.n	80006ca <GPIO_init+0x1b6>
 800067e:	2300      	movs	r3, #0
 8000680:	e023      	b.n	80006ca <GPIO_init+0x1b6>
 8000682:	2307      	movs	r3, #7
 8000684:	e021      	b.n	80006ca <GPIO_init+0x1b6>
 8000686:	2306      	movs	r3, #6
 8000688:	e01f      	b.n	80006ca <GPIO_init+0x1b6>
 800068a:	2305      	movs	r3, #5
 800068c:	e01d      	b.n	80006ca <GPIO_init+0x1b6>
 800068e:	2304      	movs	r3, #4
 8000690:	e01b      	b.n	80006ca <GPIO_init+0x1b6>
 8000692:	2303      	movs	r3, #3
 8000694:	e019      	b.n	80006ca <GPIO_init+0x1b6>
 8000696:	2302      	movs	r3, #2
 8000698:	e017      	b.n	80006ca <GPIO_init+0x1b6>
 800069a:	2301      	movs	r3, #1
 800069c:	e015      	b.n	80006ca <GPIO_init+0x1b6>
 800069e:	bf00      	nop
 80006a0:	40013c00 	.word	0x40013c00
 80006a4:	40020000 	.word	0x40020000
 80006a8:	40020400 	.word	0x40020400
 80006ac:	40020800 	.word	0x40020800
 80006b0:	40020c00 	.word	0x40020c00
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40021400 	.word	0x40021400
 80006bc:	40021800 	.word	0x40021800
 80006c0:	40021c00 	.word	0x40021c00
 80006c4:	40022000 	.word	0x40022000
 80006c8:	2300      	movs	r3, #0
 80006ca:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006cc:	4b60      	ldr	r3, [pc, #384]	; (8000850 <GPIO_init+0x33c>)
 80006ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d0:	4a5f      	ldr	r2, [pc, #380]	; (8000850 <GPIO_init+0x33c>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80006d8:	7c7a      	ldrb	r2, [r7, #17]
 80006da:	7cbb      	ldrb	r3, [r7, #18]
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	fa02 f103 	lsl.w	r1, r2, r3
 80006e2:	4a5c      	ldr	r2, [pc, #368]	; (8000854 <GPIO_init+0x340>)
 80006e4:	7cfb      	ldrb	r3, [r7, #19]
 80006e6:	3302      	adds	r3, #2
 80006e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]



		//Enable the EXTI interrupt delivery using the IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ec:	4b5a      	ldr	r3, [pc, #360]	; (8000858 <GPIO_init+0x344>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	7912      	ldrb	r2, [r2, #4]
 80006f4:	4611      	mov	r1, r2
 80006f6:	2201      	movs	r2, #1
 80006f8:	408a      	lsls	r2, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	4a56      	ldr	r2, [pc, #344]	; (8000858 <GPIO_init+0x344>)
 80006fe:	430b      	orrs	r3, r1
 8000700:	6013      	str	r3, [r2, #0]



	}
	temp = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]

	/****Configure the pin speed****/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	799b      	ldrb	r3, [r3, #6]
 800070a:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //to populate the correct two bits in the mode register
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000716:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	689a      	ldr	r2, [r3, #8]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	2103      	movs	r1, #3
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 800072a:	43db      	mvns	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	400a      	ands	r2, r1
 8000734:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6899      	ldr	r1, [r3, #8]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	430a      	orrs	r2, r1
 8000744:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]

	/****Configure pull up or pull dowm resistors****/
	temp = (pGPIOHandle->GPIO_PinConfig.PinPuPdControl
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	79db      	ldrb	r3, [r3, #7]
 800074e:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //to populate the correct two bits in the mode register
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.PinPuPdControl
 800075a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68da      	ldr	r2, [r3, #12]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	791b      	ldrb	r3, [r3, #4]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	2103      	movs	r1, #3
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 800076e:	43db      	mvns	r3, r3
 8000770:	4619      	mov	r1, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	400a      	ands	r2, r1
 8000778:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	68d9      	ldr	r1, [r3, #12]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	430a      	orrs	r2, r1
 8000788:	60da      	str	r2, [r3, #12]
	temp = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]

	/****Configure output type****/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	7a1b      	ldrb	r3, [r3, #8]
 8000792:	461a      	mov	r2, r3
			<< (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //to populate the correct two bits in the mode register
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 800079c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	685a      	ldr	r2, [r3, #4]
			<< (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	4619      	mov	r1, r3
 80007aa:	2301      	movs	r3, #1
 80007ac:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 80007ae:	43db      	mvns	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	400a      	ands	r2, r1
 80007b8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6859      	ldr	r1, [r3, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	430a      	orrs	r2, r1
 80007c8:	605a      	str	r2, [r3, #4]
	temp = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]

	/****Configure alternate function type****/
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT) {
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	795b      	ldrb	r3, [r3, #5]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d135      	bne.n	8000842 <GPIO_init+0x32e>
		//Alternate functions being initialized
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; //Determining which alternate function register to go with
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8; //the relative bit position in the register
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clear the 4 bits associated with the Pin Number
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	7c3b      	ldrb	r3, [r7, #16]
 80007ee:	3308      	adds	r3, #8
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	210f      	movs	r1, #15
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6819      	ldr	r1, [r3, #0]
 8000808:	7c3b      	ldrb	r3, [r7, #16]
 800080a:	4002      	ands	r2, r0
 800080c:	3308      	adds	r3, #8
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	440b      	add	r3, r1
 8000812:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	7c3b      	ldrb	r3, [r7, #16]
 800081a:	3308      	adds	r3, #8
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	685a      	ldr	r2, [r3, #4]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp2));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7a5b      	ldrb	r3, [r3, #9]
 8000826:	4619      	mov	r1, r3
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	4618      	mov	r0, r3
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6819      	ldr	r1, [r3, #0]
 8000836:	7c3b      	ldrb	r3, [r7, #16]
 8000838:	4302      	orrs	r2, r0
 800083a:	3308      	adds	r3, #8
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	440b      	add	r3, r1
 8000840:	605a      	str	r2, [r3, #4]

	}
}
 8000842:	bf00      	nop
 8000844:	371c      	adds	r7, #28
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40013800 	.word	0x40013800
 8000858:	40013c00 	.word	0x40013c00

0800085c <GPIO_ReadFromInputPin>:
}

/*
 * Reading and writing data
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	691a      	ldr	r2, [r3, #16]
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	fa22 f303 	lsr.w	r3, r2, r3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]
	return value;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <GPIO_ToggleOutputPin>:

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value) {
	pGPIOx->ODR = value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	78fa      	ldrb	r2, [r7, #3]
 800089a:	2101      	movs	r1, #1
 800089c:	fa01 f202 	lsl.w	r2, r1, r2
 80008a0:	405a      	eors	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	615a      	str	r2, [r3, #20]
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <__libc_init_array>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	4d0d      	ldr	r5, [pc, #52]	; (80008ec <__libc_init_array+0x38>)
 80008b8:	4c0d      	ldr	r4, [pc, #52]	; (80008f0 <__libc_init_array+0x3c>)
 80008ba:	1b64      	subs	r4, r4, r5
 80008bc:	10a4      	asrs	r4, r4, #2
 80008be:	2600      	movs	r6, #0
 80008c0:	42a6      	cmp	r6, r4
 80008c2:	d109      	bne.n	80008d8 <__libc_init_array+0x24>
 80008c4:	4d0b      	ldr	r5, [pc, #44]	; (80008f4 <__libc_init_array+0x40>)
 80008c6:	4c0c      	ldr	r4, [pc, #48]	; (80008f8 <__libc_init_array+0x44>)
 80008c8:	f000 f818 	bl	80008fc <_init>
 80008cc:	1b64      	subs	r4, r4, r5
 80008ce:	10a4      	asrs	r4, r4, #2
 80008d0:	2600      	movs	r6, #0
 80008d2:	42a6      	cmp	r6, r4
 80008d4:	d105      	bne.n	80008e2 <__libc_init_array+0x2e>
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008dc:	4798      	blx	r3
 80008de:	3601      	adds	r6, #1
 80008e0:	e7ee      	b.n	80008c0 <__libc_init_array+0xc>
 80008e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e6:	4798      	blx	r3
 80008e8:	3601      	adds	r6, #1
 80008ea:	e7f2      	b.n	80008d2 <__libc_init_array+0x1e>
 80008ec:	08000914 	.word	0x08000914
 80008f0:	08000914 	.word	0x08000914
 80008f4:	08000914 	.word	0x08000914
 80008f8:	08000918 	.word	0x08000918

080008fc <_init>:
 80008fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fe:	bf00      	nop
 8000900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000902:	bc08      	pop	{r3}
 8000904:	469e      	mov	lr, r3
 8000906:	4770      	bx	lr

08000908 <_fini>:
 8000908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800090a:	bf00      	nop
 800090c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090e:	bc08      	pop	{r3}
 8000910:	469e      	mov	lr, r3
 8000912:	4770      	bx	lr
