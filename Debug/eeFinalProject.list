
eeFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800243c  0800243c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800243c  0800243c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800243c  0800243c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002440  08002440  00012440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000000d4  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000024cc  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000875  00000000  00000000  00022578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000288  00000000  00000000  00022df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000220  00000000  00000000  00023078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000037be  00000000  00000000  00023298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002fee  00000000  00000000  00026a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000baee  00000000  00000000  00029a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00035532  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001114  00000000  00000000  00035584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002378 	.word	0x08002378

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08002378 	.word	0x08002378

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:

USART_Handle_t usart2_handle;
char msg_sent[128], msg_rec[128];
uint8_t pressed_key = 0x31;

void delay(uint16_t mult) {
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
	for (uint32_t i = 0; i < (mult * 16000); i++)
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	e002      	b.n	80002a6 <delay+0x16>
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	88fb      	ldrh	r3, [r7, #6]
 80002a8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80002ac:	fb02 f303 	mul.w	r3, r2, r3
 80002b0:	461a      	mov	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d3f3      	bcc.n	80002a0 <delay+0x10>
		;
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr

080002c6 <delayMs>:

void delayMs(uint32_t n) {
 80002c6:	b480      	push	{r7}
 80002c8:	b085      	sub	sp, #20
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (; n > 0; n--)
 80002ce:	e00d      	b.n	80002ec <delayMs+0x26>
		for (i = 0; i < 3195; i++)
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	e002      	b.n	80002dc <delayMs+0x16>
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	3301      	adds	r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	f640 427a 	movw	r2, #3194	; 0xc7a
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d9f7      	bls.n	80002d6 <delayMs+0x10>
	for (; n > 0; n--)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3b01      	subs	r3, #1
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d1ee      	bne.n	80002d0 <delayMs+0xa>
			;
}
 80002f2:	bf00      	nop
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <Keypad_GPIO_Init>:

void Keypad_GPIO_Init(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
	GPIO_Handle_t keypad_gpios;

	GPIO_PClkCtrl(GPIOE, ENABLE);
 8000306:	2101      	movs	r1, #1
 8000308:	4822      	ldr	r0, [pc, #136]	; (8000394 <Keypad_GPIO_Init+0x94>)
 800030a:	f000 fadd 	bl	80008c8 <GPIO_PClkCtrl>

	keypad_gpios.pGPIOx = GPIOE;
 800030e:	4b21      	ldr	r3, [pc, #132]	; (8000394 <Keypad_GPIO_Init+0x94>)
 8000310:	607b      	str	r3, [r7, #4]
	keypad_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000312:	2300      	movs	r3, #0
 8000314:	727b      	strb	r3, [r7, #9]
	keypad_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 8000316:	2303      	movs	r3, #3
 8000318:	72bb      	strb	r3, [r7, #10]
	keypad_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800031a:	2300      	movs	r3, #0
 800031c:	733b      	strb	r3, [r7, #12]
	keypad_gpios.GPIO_PinConfig.PinPuPdControl = GPIO_PIN_PU;
 800031e:	2301      	movs	r3, #1
 8000320:	72fb      	strb	r3, [r7, #11]

	/****Columns (inputs) settings****/
	keypad_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000322:	2307      	movs	r3, #7
 8000324:	723b      	strb	r3, [r7, #8]
	GPIO_init(&keypad_gpios);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fbe5 	bl	8000af8 <GPIO_init>

	keypad_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_8;
 800032e:	2308      	movs	r3, #8
 8000330:	723b      	strb	r3, [r7, #8]
	GPIO_init(&keypad_gpios);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fbdf 	bl	8000af8 <GPIO_init>

	keypad_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 800033a:	2309      	movs	r3, #9
 800033c:	723b      	strb	r3, [r7, #8]
	GPIO_init(&keypad_gpios);
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fbd9 	bl	8000af8 <GPIO_init>

	keypad_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000346:	230a      	movs	r3, #10
 8000348:	723b      	strb	r3, [r7, #8]
	GPIO_init(&keypad_gpios);
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f000 fbd3 	bl	8000af8 <GPIO_init>

	/****Rows (outputs) settings****/
	keypad_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000352:	2301      	movs	r3, #1
 8000354:	727b      	strb	r3, [r7, #9]
	keypad_gpios.GPIO_PinConfig.PinPuPdControl = GPIO_NO_PUPD;
 8000356:	2300      	movs	r3, #0
 8000358:	72fb      	strb	r3, [r7, #11]

	keypad_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 800035a:	2302      	movs	r3, #2
 800035c:	723b      	strb	r3, [r7, #8]
	GPIO_init(&keypad_gpios);
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4618      	mov	r0, r3
 8000362:	f000 fbc9 	bl	8000af8 <GPIO_init>

	keypad_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000366:	2303      	movs	r3, #3
 8000368:	723b      	strb	r3, [r7, #8]
	GPIO_init(&keypad_gpios);
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f000 fbc3 	bl	8000af8 <GPIO_init>

	keypad_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000372:	2304      	movs	r3, #4
 8000374:	723b      	strb	r3, [r7, #8]
	GPIO_init(&keypad_gpios);
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fbbd 	bl	8000af8 <GPIO_init>

	keypad_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 800037e:	2305      	movs	r3, #5
 8000380:	723b      	strb	r3, [r7, #8]
	GPIO_init(&keypad_gpios);
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fbb7 	bl	8000af8 <GPIO_init>

}
 800038a:	bf00      	nop
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <key_pad>:

uint8_t key_pad(void) {
 8000398:	b590      	push	{r4, r7, lr}
 800039a:	b087      	sub	sp, #28
 800039c:	af00      	add	r7, sp, #0
	uint8_t keypad[4][4] = { { 0x31, 0x32, 0x33, 0x41 }, { 0x34, 0x35, 0x36,
 800039e:	4b2f      	ldr	r3, [pc, #188]	; (800045c <key_pad+0xc4>)
 80003a0:	1d3c      	adds	r4, r7, #4
 80003a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x42 }, { 0x37, 0x38, 0x39, 0x43 }, { 0x2A, 0x30, 0x23, 0x44 } };

	uint8_t row = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	75fb      	strb	r3, [r7, #23]
	uint8_t column = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	75bb      	strb	r3, [r7, #22]
	uint8_t keypad_temp;
	for (row = 0; row < 4; row++) {
 80003b0:	2300      	movs	r3, #0
 80003b2:	75fb      	strb	r3, [r7, #23]
 80003b4:	e049      	b.n	800044a <key_pad+0xb2>
		GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_2, HIGH);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2102      	movs	r1, #2
 80003ba:	4829      	ldr	r0, [pc, #164]	; (8000460 <key_pad+0xc8>)
 80003bc:	f000 fd56 	bl	8000e6c <GPIO_WriteToOutputPin>
		GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_3, HIGH);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2103      	movs	r1, #3
 80003c4:	4826      	ldr	r0, [pc, #152]	; (8000460 <key_pad+0xc8>)
 80003c6:	f000 fd51 	bl	8000e6c <GPIO_WriteToOutputPin>
		GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_4, HIGH);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2104      	movs	r1, #4
 80003ce:	4824      	ldr	r0, [pc, #144]	; (8000460 <key_pad+0xc8>)
 80003d0:	f000 fd4c 	bl	8000e6c <GPIO_WriteToOutputPin>
		GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_5, HIGH);
 80003d4:	2201      	movs	r2, #1
 80003d6:	2105      	movs	r1, #5
 80003d8:	4821      	ldr	r0, [pc, #132]	; (8000460 <key_pad+0xc8>)
 80003da:	f000 fd47 	bl	8000e6c <GPIO_WriteToOutputPin>
		GPIO_WriteToOutputPin(GPIOE, (GPIO_PIN_2 + row), LOW);
 80003de:	7dfb      	ldrb	r3, [r7, #23]
 80003e0:	3302      	adds	r3, #2
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	2200      	movs	r2, #0
 80003e6:	4619      	mov	r1, r3
 80003e8:	481d      	ldr	r0, [pc, #116]	; (8000460 <key_pad+0xc8>)
 80003ea:	f000 fd3f 	bl	8000e6c <GPIO_WriteToOutputPin>

		for (column = 0; column < 4; column++) {
 80003ee:	2300      	movs	r3, #0
 80003f0:	75bb      	strb	r3, [r7, #22]
 80003f2:	e024      	b.n	800043e <key_pad+0xa6>
			if (GPIO_ReadFromInputPin(GPIOE, (GPIO_PIN_7 + column)) == 0) {
 80003f4:	7dbb      	ldrb	r3, [r7, #22]
 80003f6:	3307      	adds	r3, #7
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	4619      	mov	r1, r3
 80003fc:	4818      	ldr	r0, [pc, #96]	; (8000460 <key_pad+0xc8>)
 80003fe:	f000 fd1f 	bl	8000e40 <GPIO_ReadFromInputPin>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d117      	bne.n	8000438 <key_pad+0xa0>
				//key pressed
				delay(80);
 8000408:	2050      	movs	r0, #80	; 0x50
 800040a:	f7ff ff41 	bl	8000290 <delay>
				keypad_temp = keypad[row][column];
 800040e:	7dfa      	ldrb	r2, [r7, #23]
 8000410:	7dbb      	ldrb	r3, [r7, #22]
 8000412:	0092      	lsls	r2, r2, #2
 8000414:	3218      	adds	r2, #24
 8000416:	443a      	add	r2, r7
 8000418:	4413      	add	r3, r2
 800041a:	3b14      	subs	r3, #20
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	757b      	strb	r3, [r7, #21]
				printf("%c\n", keypad[row][column]);
 8000420:	7dfa      	ldrb	r2, [r7, #23]
 8000422:	7dbb      	ldrb	r3, [r7, #22]
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	3218      	adds	r2, #24
 8000428:	443a      	add	r2, r7
 800042a:	4413      	add	r3, r2
 800042c:	3b14      	subs	r3, #20
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4619      	mov	r1, r3
 8000432:	480c      	ldr	r0, [pc, #48]	; (8000464 <key_pad+0xcc>)
 8000434:	f001 f812 	bl	800145c <iprintf>
		for (column = 0; column < 4; column++) {
 8000438:	7dbb      	ldrb	r3, [r7, #22]
 800043a:	3301      	adds	r3, #1
 800043c:	75bb      	strb	r3, [r7, #22]
 800043e:	7dbb      	ldrb	r3, [r7, #22]
 8000440:	2b03      	cmp	r3, #3
 8000442:	d9d7      	bls.n	80003f4 <key_pad+0x5c>
	for (row = 0; row < 4; row++) {
 8000444:	7dfb      	ldrb	r3, [r7, #23]
 8000446:	3301      	adds	r3, #1
 8000448:	75fb      	strb	r3, [r7, #23]
 800044a:	7dfb      	ldrb	r3, [r7, #23]
 800044c:	2b03      	cmp	r3, #3
 800044e:	d9b2      	bls.n	80003b6 <key_pad+0x1e>
				//return keypad_temp;
			}
		}
	}
	return keypad_temp;
 8000450:	7d7b      	ldrb	r3, [r7, #21]
}
 8000452:	4618      	mov	r0, r3
 8000454:	371c      	adds	r7, #28
 8000456:	46bd      	mov	sp, r7
 8000458:	bd90      	pop	{r4, r7, pc}
 800045a:	bf00      	nop
 800045c:	08002394 	.word	0x08002394
 8000460:	40021000 	.word	0x40021000
 8000464:	08002390 	.word	0x08002390

08000468 <USART2_Init>:

void USART2_Init(void) {
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <USART2_Init+0x3c>)
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <USART2_Init+0x40>)
 8000470:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_BAUD_1200;
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <USART2_Init+0x3c>)
 8000474:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000478:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <USART2_Init+0x3c>)
 800047c:	2200      	movs	r2, #0
 800047e:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <USART2_Init+0x3c>)
 8000482:	2202      	movs	r2, #2
 8000484:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <USART2_Init+0x3c>)
 8000488:	2200      	movs	r2, #0
 800048a:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLENGTH_8;
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <USART2_Init+0x3c>)
 800048e:	2200      	movs	r2, #0
 8000490:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000492:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <USART2_Init+0x3c>)
 8000494:	2200      	movs	r2, #0
 8000496:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <USART2_Init+0x3c>)
 800049a:	f000 fe9b 	bl	80011d4 <USART_Init>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000098 	.word	0x20000098
 80004a8:	40004400 	.word	0x40004400

080004ac <USART2_GPIO_Init>:

void USART2_GPIO_Init(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	GPIO_PClkCtrl(GPIOA, ENABLE);
 80004b2:	2101      	movs	r1, #1
 80004b4:	480f      	ldr	r0, [pc, #60]	; (80004f4 <USART2_GPIO_Init+0x48>)
 80004b6:	f000 fa07 	bl	80008c8 <GPIO_PClkCtrl>

	usart_gpios.pGPIOx = GPIOA;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <USART2_GPIO_Init+0x48>)
 80004bc:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT;
 80004be:	2302      	movs	r3, #2
 80004c0:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80004c2:	2300      	movs	r3, #0
 80004c4:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.PinPuPdControl = GPIO_PIN_PU;
 80004c6:	2301      	movs	r3, #1
 80004c8:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 80004ca:	2303      	movs	r3, #3
 80004cc:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFuncMode = 7;
 80004ce:	2307      	movs	r3, #7
 80004d0:	737b      	strb	r3, [r7, #13]

	//usart2 tx
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80004d2:	2302      	movs	r3, #2
 80004d4:	723b      	strb	r3, [r7, #8]
	GPIO_init(&usart_gpios);
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 fb0d 	bl	8000af8 <GPIO_init>

	//usart rx
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 80004de:	2303      	movs	r3, #3
 80004e0:	723b      	strb	r3, [r7, #8]
	GPIO_init(&usart_gpios);
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fb07 	bl	8000af8 <GPIO_init>


}
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40020000 	.word	0x40020000

080004f8 <LCD_GPIO_Init>:

void LCD_GPIO_Init(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioDpins, GpioCpins;

	GPIO_PClkCtrl(GPIOD, ENABLE);
 80004fe:	2101      	movs	r1, #1
 8000500:	4836      	ldr	r0, [pc, #216]	; (80005dc <LCD_GPIO_Init+0xe4>)
 8000502:	f000 f9e1 	bl	80008c8 <GPIO_PClkCtrl>
	GPIO_PClkCtrl(GPIOC, ENABLE);
 8000506:	2101      	movs	r1, #1
 8000508:	4835      	ldr	r0, [pc, #212]	; (80005e0 <LCD_GPIO_Init+0xe8>)
 800050a:	f000 f9dd 	bl	80008c8 <GPIO_PClkCtrl>

	GpioDpins.pGPIOx = GPIOD; //PD0 to PD7 for the data lines
 800050e:	4b33      	ldr	r3, [pc, #204]	; (80005dc <LCD_GPIO_Init+0xe4>)
 8000510:	60fb      	str	r3, [r7, #12]
	GpioDpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000512:	2301      	movs	r3, #1
 8000514:	747b      	strb	r3, [r7, #17]
	GpioDpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 8000516:	2303      	movs	r3, #3
 8000518:	74bb      	strb	r3, [r7, #18]
	GpioDpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800051a:	2300      	movs	r3, #0
 800051c:	753b      	strb	r3, [r7, #20]
	GpioDpins.GPIO_PinConfig.PinPuPdControl = GPIO_NO_PUPD;
 800051e:	2300      	movs	r3, #0
 8000520:	74fb      	strb	r3, [r7, #19]

	GpioCpins.pGPIOx = GPIOC; // PC0 to PC2 for control lines
 8000522:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <LCD_GPIO_Init+0xe8>)
 8000524:	603b      	str	r3, [r7, #0]
	GpioCpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000526:	2301      	movs	r3, #1
 8000528:	717b      	strb	r3, [r7, #5]
	GpioCpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 800052a:	2303      	movs	r3, #3
 800052c:	71bb      	strb	r3, [r7, #6]
	GpioCpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800052e:	2300      	movs	r3, #0
 8000530:	723b      	strb	r3, [r7, #8]
	GpioCpins.GPIO_PinConfig.PinPuPdControl = GPIO_NO_PUPD;
 8000532:	2300      	movs	r3, #0
 8000534:	71fb      	strb	r3, [r7, #7]

	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000536:	2300      	movs	r3, #0
 8000538:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fada 	bl	8000af8 <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000544:	2301      	movs	r3, #1
 8000546:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fad3 	bl	8000af8 <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000552:	2302      	movs	r3, #2
 8000554:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	4618      	mov	r0, r3
 800055c:	f000 facc 	bl	8000af8 <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000560:	2303      	movs	r3, #3
 8000562:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fac5 	bl	8000af8 <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 800056e:	2304      	movs	r3, #4
 8000570:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fabe 	bl	8000af8 <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 800057c:	2305      	movs	r3, #5
 800057e:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fab7 	bl	8000af8 <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800058a:	2306      	movs	r3, #6
 800058c:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fab0 	bl	8000af8 <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000598:	2307      	movs	r3, #7
 800059a:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 faa9 	bl	8000af8 <GPIO_init>

	GpioCpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	713b      	strb	r3, [r7, #4]
	GPIO_init(&GpioCpins);
 80005aa:	463b      	mov	r3, r7
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 faa3 	bl	8000af8 <GPIO_init>
	GpioCpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	713b      	strb	r3, [r7, #4]
	GPIO_init(&GpioCpins);
 80005b6:	463b      	mov	r3, r7
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fa9d 	bl	8000af8 <GPIO_init>
	GpioCpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80005be:	2302      	movs	r3, #2
 80005c0:	713b      	strb	r3, [r7, #4]
	GPIO_init(&GpioCpins);
 80005c2:	463b      	mov	r3, r7
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fa97 	bl	8000af8 <GPIO_init>

	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_1, LOW); //RW set to Write
 80005ca:	2200      	movs	r2, #0
 80005cc:	2101      	movs	r1, #1
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <LCD_GPIO_Init+0xe8>)
 80005d0:	f000 fc4c 	bl	8000e6c <GPIO_WriteToOutputPin>

}
 80005d4:	bf00      	nop
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40020c00 	.word	0x40020c00
 80005e0:	40020800 	.word	0x40020800

080005e4 <LCD_command>:

void LCD_command(unsigned char input) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPort(GPIOD, input);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	4812      	ldr	r0, [pc, #72]	; (8000640 <LCD_command+0x5c>)
 80005f6:	f000 fc5e 	bl	8000eb6 <GPIO_WriteToOutputPort>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_0, LOW); //RS to 0
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	4811      	ldr	r0, [pc, #68]	; (8000644 <LCD_command+0x60>)
 8000600:	f000 fc34 	bl	8000e6c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_1, LOW);
 8000604:	2200      	movs	r2, #0
 8000606:	2101      	movs	r1, #1
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <LCD_command+0x60>)
 800060a:	f000 fc2f 	bl	8000e6c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_2, LOW);
 800060e:	2200      	movs	r2, #0
 8000610:	2102      	movs	r1, #2
 8000612:	480c      	ldr	r0, [pc, #48]	; (8000644 <LCD_command+0x60>)
 8000614:	f000 fc2a 	bl	8000e6c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_2, HIGH); //EN high
 8000618:	2201      	movs	r2, #1
 800061a:	2102      	movs	r1, #2
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <LCD_command+0x60>)
 800061e:	f000 fc25 	bl	8000e6c <GPIO_WriteToOutputPin>
	delayMs(10);
 8000622:	200a      	movs	r0, #10
 8000624:	f7ff fe4f 	bl	80002c6 <delayMs>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_2, LOW); //EN low
 8000628:	2200      	movs	r2, #0
 800062a:	2102      	movs	r1, #2
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <LCD_command+0x60>)
 800062e:	f000 fc1d 	bl	8000e6c <GPIO_WriteToOutputPin>
	delayMs(20);
 8000632:	2014      	movs	r0, #20
 8000634:	f7ff fe47 	bl	80002c6 <delayMs>

}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020c00 	.word	0x40020c00
 8000644:	40020800 	.word	0x40020800

08000648 <LCD_Init>:

void LCD_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	unsigned char commands[] = { 0x38, 0x06, 0x01, 0x0F };
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <LCD_Init+0x60>)
 8000650:	603b      	str	r3, [r7, #0]
	delayMs(45);
 8000652:	202d      	movs	r0, #45	; 0x2d
 8000654:	f7ff fe37 	bl	80002c6 <delayMs>
	LCD_command(0x30);
 8000658:	2030      	movs	r0, #48	; 0x30
 800065a:	f7ff ffc3 	bl	80005e4 <LCD_command>
	delayMs(15);
 800065e:	200f      	movs	r0, #15
 8000660:	f7ff fe31 	bl	80002c6 <delayMs>
	LCD_command(0x30);
 8000664:	2030      	movs	r0, #48	; 0x30
 8000666:	f7ff ffbd 	bl	80005e4 <LCD_command>
	delayMs(10);
 800066a:	200a      	movs	r0, #10
 800066c:	f7ff fe2b 	bl	80002c6 <delayMs>
	LCD_command(0x30);
 8000670:	2030      	movs	r0, #48	; 0x30
 8000672:	f7ff ffb7 	bl	80005e4 <LCD_command>
	delayMs(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f7ff fe25 	bl	80002c6 <delayMs>

	for (uint8_t i = 0; i <= 3; i++) {
 800067c:	2300      	movs	r3, #0
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	e00a      	b.n	8000698 <LCD_Init+0x50>
		LCD_command(commands[i]);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	3308      	adds	r3, #8
 8000686:	443b      	add	r3, r7
 8000688:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffa9 	bl	80005e4 <LCD_command>
	for (uint8_t i = 0; i <= 3; i++) {
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	3301      	adds	r3, #1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b03      	cmp	r3, #3
 800069c:	d9f1      	bls.n	8000682 <LCD_Init+0x3a>
	}

}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	0f010638 	.word	0x0f010638

080006ac <main>:
	delayMs(10);
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_2, LOW); //EN low
	delayMs(10);
}

int main(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	Keypad_GPIO_Init();
 80006b0:	f7ff fe26 	bl	8000300 <Keypad_GPIO_Init>
	USART2_GPIO_Init();
 80006b4:	f7ff fefa 	bl	80004ac <USART2_GPIO_Init>
	USART2_Init();
 80006b8:	f7ff fed6 	bl	8000468 <USART2_Init>
	//USART_IRQInterruptConfig(IRQ_NO_USART2, ENABLE);
	USART_PCtrl(USART2, ENABLE);
 80006bc:	2101      	movs	r1, #1
 80006be:	4816      	ldr	r0, [pc, #88]	; (8000718 <main+0x6c>)
 80006c0:	f000 fe1b 	bl	80012fa <USART_PCtrl>
	LCD_GPIO_Init();
 80006c4:	f7ff ff18 	bl	80004f8 <LCD_GPIO_Init>
	LCD_Init();
 80006c8:	f7ff ffbe 	bl	8000648 <LCD_Init>
	delayMs(10);
 80006cc:	200a      	movs	r0, #10
 80006ce:	f7ff fdfa 	bl	80002c6 <delayMs>
	//send what is returned from key_pad()

	while (1) {
		//while ( USART_ReceiveDataIT(&usart2_handle,(uint8_t*)msg_rec,1) !=
		//USART_READY ){
		pressed_key = key_pad();
 80006d2:	f7ff fe61 	bl	8000398 <key_pad>
 80006d6:	4603      	mov	r3, r0
 80006d8:	461a      	mov	r2, r3
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <main+0x70>)
 80006dc:	701a      	strb	r2, [r3, #0]
		if (pressed_key != 0) {
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <main+0x70>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d014      	beq.n	8000710 <main+0x64>
			msg_sent[0] = pressed_key;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <main+0x70>)
 80006e8:	781a      	ldrb	r2, [r3, #0]
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <main+0x74>)
 80006ec:	701a      	strb	r2, [r3, #0]
			printf("%c\n", pressed_key);
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <main+0x70>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <main+0x78>)
 80006f6:	f000 feb1 	bl	800145c <iprintf>
			USART_SendData(&usart2_handle, (uint8_t*) msg_sent, 1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	4908      	ldr	r1, [pc, #32]	; (8000720 <main+0x74>)
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <main+0x7c>)
 8000700:	f000 fe17 	bl	8001332 <USART_SendData>
			printf("%c\n", pressed_key);
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <main+0x70>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <main+0x78>)
 800070c:	f000 fea6 	bl	800145c <iprintf>
		}
		//}
		//USART_ReceiveData(&usart2_handle,(uint8_t*)msg_rec,1);
		//LCD_data((uint8_t) *msg_rec);
		delayMs(60);
 8000710:	203c      	movs	r0, #60	; 0x3c
 8000712:	f7ff fdd8 	bl	80002c6 <delayMs>
		pressed_key = key_pad();
 8000716:	e7dc      	b.n	80006d2 <main+0x26>
 8000718:	40004400 	.word	0x40004400
 800071c:	20000000 	.word	0x20000000
 8000720:	200000bc 	.word	0x200000bc
 8000724:	08002390 	.word	0x08002390
 8000728:	20000098 	.word	0x20000098

0800072c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	e00a      	b.n	8000754 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800073e:	f3af 8000 	nop.w
 8000742:	4601      	mov	r1, r0
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	60ba      	str	r2, [r7, #8]
 800074a:	b2ca      	uxtb	r2, r1
 800074c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	429a      	cmp	r2, r3
 800075a:	dbf0      	blt.n	800073e <_read+0x12>
	}

return len;
 800075c:	687b      	ldr	r3, [r7, #4]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b086      	sub	sp, #24
 800076a:	af00      	add	r7, sp, #0
 800076c:	60f8      	str	r0, [r7, #12]
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	e009      	b.n	800078c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	60ba      	str	r2, [r7, #8]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	3301      	adds	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	429a      	cmp	r2, r3
 8000792:	dbf1      	blt.n	8000778 <_write+0x12>
	}
	return len;
 8000794:	687b      	ldr	r3, [r7, #4]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <_close>:

int _close(int file)
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
	return -1;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007c6:	605a      	str	r2, [r3, #4]
	return 0;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <_isatty>:

int _isatty(int file)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
	return 1;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
	return 0;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000810:	4a14      	ldr	r2, [pc, #80]	; (8000864 <_sbrk+0x5c>)
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <_sbrk+0x60>)
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <_sbrk+0x64>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d102      	bne.n	800082a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <_sbrk+0x64>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <_sbrk+0x68>)
 8000828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <_sbrk+0x64>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	429a      	cmp	r2, r3
 8000836:	d207      	bcs.n	8000848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000838:	f000 fdde 	bl	80013f8 <__errno>
 800083c:	4603      	mov	r3, r0
 800083e:	220c      	movs	r2, #12
 8000840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	e009      	b.n	800085c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <_sbrk+0x64>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <_sbrk+0x64>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	4a05      	ldr	r2, [pc, #20]	; (800086c <_sbrk+0x64>)
 8000858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800085a:	68fb      	ldr	r3, [r7, #12]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20020000 	.word	0x20020000
 8000868:	00000400 	.word	0x00000400
 800086c:	2000013c 	.word	0x2000013c
 8000870:	20000150 	.word	0x20000150

08000874 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000876:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000878:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	; (80008b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <LoopForever+0xe>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	; (80008c0 <LoopForever+0x16>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008a2:	f000 fdaf 	bl	8001404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008a6:	f7ff ff01 	bl	80006ac <main>

080008aa <LoopForever>:

LoopForever:
    b LoopForever
 80008aa:	e7fe      	b.n	80008aa <LoopForever>
  ldr   r0, =_estack
 80008ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80008b8:	08002444 	.word	0x08002444
  ldr r2, =_sbss
 80008bc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80008c0:	20000150 	.word	0x20000150

080008c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC_IRQHandler>
	...

080008c8 <GPIO_PClkCtrl>:
#include "stm32f407xx_gpio_driver.h"

/*
 * Peripheral clock control
 */
void GPIO_PClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t State) {
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
	if (State == ENABLE) {
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d178      	bne.n	80009cc <GPIO_PClkCtrl+0x104>
		if (pGPIOx == GPIOA) {
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a7a      	ldr	r2, [pc, #488]	; (8000ac8 <GPIO_PClkCtrl+0x200>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d106      	bne.n	80008f0 <GPIO_PClkCtrl+0x28>
			GPIOA_PCLK_EN();
 80008e2:	4b7a      	ldr	r3, [pc, #488]	; (8000acc <GPIO_PClkCtrl+0x204>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a79      	ldr	r2, [pc, #484]	; (8000acc <GPIO_PClkCtrl+0x204>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOJ_PCLK_DI();
		} else if (pGPIOx == GPIOK) {
			GPIOK_PCLK_DI();
		}
	}
}
 80008ee:	e0e5      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOB) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a77      	ldr	r2, [pc, #476]	; (8000ad0 <GPIO_PClkCtrl+0x208>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d106      	bne.n	8000906 <GPIO_PClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 80008f8:	4b74      	ldr	r3, [pc, #464]	; (8000acc <GPIO_PClkCtrl+0x204>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a73      	ldr	r2, [pc, #460]	; (8000acc <GPIO_PClkCtrl+0x204>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000904:	e0da      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOC) {
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a72      	ldr	r2, [pc, #456]	; (8000ad4 <GPIO_PClkCtrl+0x20c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d106      	bne.n	800091c <GPIO_PClkCtrl+0x54>
			GPIOC_PCLK_EN();
 800090e:	4b6f      	ldr	r3, [pc, #444]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a6e      	ldr	r2, [pc, #440]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
}
 800091a:	e0cf      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOD) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a6e      	ldr	r2, [pc, #440]	; (8000ad8 <GPIO_PClkCtrl+0x210>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d106      	bne.n	8000932 <GPIO_PClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 8000924:	4b69      	ldr	r3, [pc, #420]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a68      	ldr	r2, [pc, #416]	; (8000acc <GPIO_PClkCtrl+0x204>)
 800092a:	f043 0308 	orr.w	r3, r3, #8
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000930:	e0c4      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOE) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a69      	ldr	r2, [pc, #420]	; (8000adc <GPIO_PClkCtrl+0x214>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d106      	bne.n	8000948 <GPIO_PClkCtrl+0x80>
			GPIOE_PCLK_EN();
 800093a:	4b64      	ldr	r3, [pc, #400]	; (8000acc <GPIO_PClkCtrl+0x204>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a63      	ldr	r2, [pc, #396]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000946:	e0b9      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOF) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a65      	ldr	r2, [pc, #404]	; (8000ae0 <GPIO_PClkCtrl+0x218>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d106      	bne.n	800095e <GPIO_PClkCtrl+0x96>
			GPIOF_PCLK_EN();
 8000950:	4b5e      	ldr	r3, [pc, #376]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	4a5d      	ldr	r2, [pc, #372]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000956:	f043 0320 	orr.w	r3, r3, #32
 800095a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800095c:	e0ae      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOG) {
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a60      	ldr	r2, [pc, #384]	; (8000ae4 <GPIO_PClkCtrl+0x21c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d106      	bne.n	8000974 <GPIO_PClkCtrl+0xac>
			GPIOG_PCLK_EN();
 8000966:	4b59      	ldr	r3, [pc, #356]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a58      	ldr	r2, [pc, #352]	; (8000acc <GPIO_PClkCtrl+0x204>)
 800096c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000972:	e0a3      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOH) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a5c      	ldr	r2, [pc, #368]	; (8000ae8 <GPIO_PClkCtrl+0x220>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d106      	bne.n	800098a <GPIO_PClkCtrl+0xc2>
			GPIOH_PCLK_EN();
 800097c:	4b53      	ldr	r3, [pc, #332]	; (8000acc <GPIO_PClkCtrl+0x204>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	4a52      	ldr	r2, [pc, #328]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000986:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000988:	e098      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOI) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a57      	ldr	r2, [pc, #348]	; (8000aec <GPIO_PClkCtrl+0x224>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d106      	bne.n	80009a0 <GPIO_PClkCtrl+0xd8>
			GPIOI_PCLK_EN();
 8000992:	4b4e      	ldr	r3, [pc, #312]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a4d      	ldr	r2, [pc, #308]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800099e:	e08d      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOJ) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a53      	ldr	r2, [pc, #332]	; (8000af0 <GPIO_PClkCtrl+0x228>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d106      	bne.n	80009b6 <GPIO_PClkCtrl+0xee>
			GPIOJ_PCLK_EN();
 80009a8:	4b48      	ldr	r3, [pc, #288]	; (8000acc <GPIO_PClkCtrl+0x204>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	4a47      	ldr	r2, [pc, #284]	; (8000acc <GPIO_PClkCtrl+0x204>)
 80009ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009b4:	e082      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOK) {
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a4e      	ldr	r2, [pc, #312]	; (8000af4 <GPIO_PClkCtrl+0x22c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d17e      	bne.n	8000abc <GPIO_PClkCtrl+0x1f4>
			GPIOK_PCLK_EN();
 80009be:	4b43      	ldr	r3, [pc, #268]	; (8000acc <GPIO_PClkCtrl+0x204>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a42      	ldr	r2, [pc, #264]	; (8000acc <GPIO_PClkCtrl+0x204>)
 80009c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ca:	e077      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		if (pGPIOx == GPIOA) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a3e      	ldr	r2, [pc, #248]	; (8000ac8 <GPIO_PClkCtrl+0x200>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d106      	bne.n	80009e2 <GPIO_PClkCtrl+0x11a>
			GPIOA_PCLK_DI();
 80009d4:	4b3d      	ldr	r3, [pc, #244]	; (8000acc <GPIO_PClkCtrl+0x204>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a3c      	ldr	r2, [pc, #240]	; (8000acc <GPIO_PClkCtrl+0x204>)
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009e0:	e06c      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOB) {
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a3a      	ldr	r2, [pc, #232]	; (8000ad0 <GPIO_PClkCtrl+0x208>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d106      	bne.n	80009f8 <GPIO_PClkCtrl+0x130>
			GPIOB_PCLK_DI();
 80009ea:	4b38      	ldr	r3, [pc, #224]	; (8000acc <GPIO_PClkCtrl+0x204>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a37      	ldr	r2, [pc, #220]	; (8000acc <GPIO_PClkCtrl+0x204>)
 80009f0:	f023 0302 	bic.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009f6:	e061      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOC) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a36      	ldr	r2, [pc, #216]	; (8000ad4 <GPIO_PClkCtrl+0x20c>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d106      	bne.n	8000a0e <GPIO_PClkCtrl+0x146>
			GPIOC_PCLK_DI();
 8000a00:	4b32      	ldr	r3, [pc, #200]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a31      	ldr	r2, [pc, #196]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a06:	f023 0304 	bic.w	r3, r3, #4
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a0c:	e056      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOD) {
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a31      	ldr	r2, [pc, #196]	; (8000ad8 <GPIO_PClkCtrl+0x210>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d106      	bne.n	8000a24 <GPIO_PClkCtrl+0x15c>
			GPIOD_PCLK_DI();
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a2c      	ldr	r2, [pc, #176]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a1c:	f023 0308 	bic.w	r3, r3, #8
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a22:	e04b      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOE) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <GPIO_PClkCtrl+0x214>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d106      	bne.n	8000a3a <GPIO_PClkCtrl+0x172>
			GPIOE_PCLK_DI();
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a26      	ldr	r2, [pc, #152]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a32:	f023 0310 	bic.w	r3, r3, #16
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a38:	e040      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOF) {
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a28      	ldr	r2, [pc, #160]	; (8000ae0 <GPIO_PClkCtrl+0x218>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d106      	bne.n	8000a50 <GPIO_PClkCtrl+0x188>
			GPIOF_PCLK_DI();
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a21      	ldr	r2, [pc, #132]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a48:	f023 0320 	bic.w	r3, r3, #32
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a4e:	e035      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOG) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a24      	ldr	r2, [pc, #144]	; (8000ae4 <GPIO_PClkCtrl+0x21c>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d106      	bne.n	8000a66 <GPIO_PClkCtrl+0x19e>
			GPIOG_PCLK_DI();
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a62:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a64:	e02a      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOH) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <GPIO_PClkCtrl+0x220>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d106      	bne.n	8000a7c <GPIO_PClkCtrl+0x1b4>
			GPIOH_PCLK_DI();
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a16      	ldr	r2, [pc, #88]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a7a:	e01f      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOI) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <GPIO_PClkCtrl+0x224>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d106      	bne.n	8000a92 <GPIO_PClkCtrl+0x1ca>
			GPIOI_PCLK_DI();
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	4a10      	ldr	r2, [pc, #64]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a8e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a90:	e014      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOJ) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <GPIO_PClkCtrl+0x228>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d106      	bne.n	8000aa8 <GPIO_PClkCtrl+0x1e0>
			GPIOJ_PCLK_DI();
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aa6:	e009      	b.n	8000abc <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOK) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <GPIO_PClkCtrl+0x22c>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d105      	bne.n	8000abc <GPIO_PClkCtrl+0x1f4>
			GPIOK_PCLK_DI();
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	4a05      	ldr	r2, [pc, #20]	; (8000acc <GPIO_PClkCtrl+0x204>)
 8000ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000aba:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40021800 	.word	0x40021800
 8000ae8:	40021c00 	.word	0x40021c00
 8000aec:	40022000 	.word	0x40022000
 8000af0:	40022400 	.word	0x40022400
 8000af4:	40022800 	.word	0x40022800

08000af8 <GPIO_init>:

/*
 * initializing
 */
void GPIO_init(GPIO_Handle_t *pGPIOHandle) {
 8000af8:	b480      	push	{r7}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
	/****Configure the pin mode****/
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	795b      	ldrb	r3, [r3, #5]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d820      	bhi.n	8000b4e <GPIO_init+0x56>
		//No interrupts are being initialized
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	795b      	ldrb	r3, [r3, #5]
 8000b10:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //to populate the correct two bits in the mode register
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	791b      	ldrb	r3, [r3, #4]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000b1c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	791b      	ldrb	r3, [r3, #4]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	2103      	movs	r1, #3
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	4619      	mov	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	400a      	ands	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6819      	ldr	r1, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	e0cb      	b.n	8000ce6 <GPIO_init+0x1ee>
		//temp = 0;
	} else {
		//Interrupts are being initialized
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	795b      	ldrb	r3, [r3, #5]
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d117      	bne.n	8000b86 <GPIO_init+0x8e>
			//Falling edge trigger interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b56:	4b4b      	ldr	r3, [pc, #300]	; (8000c84 <GPIO_init+0x18c>)
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	7912      	ldrb	r2, [r2, #4]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	2201      	movs	r2, #1
 8000b62:	408a      	lsls	r2, r1
 8000b64:	4611      	mov	r1, r2
 8000b66:	4a47      	ldr	r2, [pc, #284]	; (8000c84 <GPIO_init+0x18c>)
 8000b68:	430b      	orrs	r3, r1
 8000b6a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b6c:	4b45      	ldr	r3, [pc, #276]	; (8000c84 <GPIO_init+0x18c>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	7912      	ldrb	r2, [r2, #4]
 8000b74:	4611      	mov	r1, r2
 8000b76:	2201      	movs	r2, #1
 8000b78:	408a      	lsls	r2, r1
 8000b7a:	43d2      	mvns	r2, r2
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4a41      	ldr	r2, [pc, #260]	; (8000c84 <GPIO_init+0x18c>)
 8000b80:	400b      	ands	r3, r1
 8000b82:	6093      	str	r3, [r2, #8]
 8000b84:	e035      	b.n	8000bf2 <GPIO_init+0xfa>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	795b      	ldrb	r3, [r3, #5]
 8000b8a:	2b05      	cmp	r3, #5
 8000b8c:	d117      	bne.n	8000bbe <GPIO_init+0xc6>
			//Rising edge trigger
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <GPIO_init+0x18c>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	7912      	ldrb	r2, [r2, #4]
 8000b96:	4611      	mov	r1, r2
 8000b98:	2201      	movs	r2, #1
 8000b9a:	408a      	lsls	r2, r1
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4a39      	ldr	r2, [pc, #228]	; (8000c84 <GPIO_init+0x18c>)
 8000ba0:	430b      	orrs	r3, r1
 8000ba2:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ba4:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <GPIO_init+0x18c>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	7912      	ldrb	r2, [r2, #4]
 8000bac:	4611      	mov	r1, r2
 8000bae:	2201      	movs	r2, #1
 8000bb0:	408a      	lsls	r2, r1
 8000bb2:	43d2      	mvns	r2, r2
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4a33      	ldr	r2, [pc, #204]	; (8000c84 <GPIO_init+0x18c>)
 8000bb8:	400b      	ands	r3, r1
 8000bba:	60d3      	str	r3, [r2, #12]
 8000bbc:	e019      	b.n	8000bf2 <GPIO_init+0xfa>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	795b      	ldrb	r3, [r3, #5]
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d115      	bne.n	8000bf2 <GPIO_init+0xfa>
			//Both rising and falling edge trigger interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <GPIO_init+0x18c>)
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	7912      	ldrb	r2, [r2, #4]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	408a      	lsls	r2, r1
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4a2b      	ldr	r2, [pc, #172]	; (8000c84 <GPIO_init+0x18c>)
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <GPIO_init+0x18c>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	7912      	ldrb	r2, [r2, #4]
 8000be4:	4611      	mov	r1, r2
 8000be6:	2201      	movs	r2, #1
 8000be8:	408a      	lsls	r2, r1
 8000bea:	4611      	mov	r1, r2
 8000bec:	4a25      	ldr	r2, [pc, #148]	; (8000c84 <GPIO_init+0x18c>)
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	6093      	str	r3, [r2, #8]
		}

		//Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	791b      	ldrb	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a1f      	ldr	r2, [pc, #124]	; (8000c88 <GPIO_init+0x190>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d04e      	beq.n	8000cac <GPIO_init+0x1b4>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <GPIO_init+0x194>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d032      	beq.n	8000c7e <GPIO_init+0x186>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <GPIO_init+0x198>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d02b      	beq.n	8000c7a <GPIO_init+0x182>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <GPIO_init+0x19c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d024      	beq.n	8000c76 <GPIO_init+0x17e>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <GPIO_init+0x1a0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d01d      	beq.n	8000c72 <GPIO_init+0x17a>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <GPIO_init+0x1a4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d016      	beq.n	8000c6e <GPIO_init+0x176>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <GPIO_init+0x1a8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d00f      	beq.n	8000c6a <GPIO_init+0x172>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <GPIO_init+0x1ac>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d008      	beq.n	8000c66 <GPIO_init+0x16e>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <GPIO_init+0x1b0>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <GPIO_init+0x16a>
 8000c5e:	2308      	movs	r3, #8
 8000c60:	e025      	b.n	8000cae <GPIO_init+0x1b6>
 8000c62:	2300      	movs	r3, #0
 8000c64:	e023      	b.n	8000cae <GPIO_init+0x1b6>
 8000c66:	2307      	movs	r3, #7
 8000c68:	e021      	b.n	8000cae <GPIO_init+0x1b6>
 8000c6a:	2306      	movs	r3, #6
 8000c6c:	e01f      	b.n	8000cae <GPIO_init+0x1b6>
 8000c6e:	2305      	movs	r3, #5
 8000c70:	e01d      	b.n	8000cae <GPIO_init+0x1b6>
 8000c72:	2304      	movs	r3, #4
 8000c74:	e01b      	b.n	8000cae <GPIO_init+0x1b6>
 8000c76:	2303      	movs	r3, #3
 8000c78:	e019      	b.n	8000cae <GPIO_init+0x1b6>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e017      	b.n	8000cae <GPIO_init+0x1b6>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e015      	b.n	8000cae <GPIO_init+0x1b6>
 8000c82:	bf00      	nop
 8000c84:	40013c00 	.word	0x40013c00
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020c00 	.word	0x40020c00
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40021400 	.word	0x40021400
 8000ca0:	40021800 	.word	0x40021800
 8000ca4:	40021c00 	.word	0x40021c00
 8000ca8:	40022000 	.word	0x40022000
 8000cac:	2300      	movs	r3, #0
 8000cae:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000cb0:	4b60      	ldr	r3, [pc, #384]	; (8000e34 <GPIO_init+0x33c>)
 8000cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb4:	4a5f      	ldr	r2, [pc, #380]	; (8000e34 <GPIO_init+0x33c>)
 8000cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cba:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000cbc:	7c7a      	ldrb	r2, [r7, #17]
 8000cbe:	7cbb      	ldrb	r3, [r7, #18]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	fa02 f103 	lsl.w	r1, r2, r3
 8000cc6:	4a5c      	ldr	r2, [pc, #368]	; (8000e38 <GPIO_init+0x340>)
 8000cc8:	7cfb      	ldrb	r3, [r7, #19]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]



		//Enable the EXTI interrupt delivery using the IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cd0:	4b5a      	ldr	r3, [pc, #360]	; (8000e3c <GPIO_init+0x344>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	7912      	ldrb	r2, [r2, #4]
 8000cd8:	4611      	mov	r1, r2
 8000cda:	2201      	movs	r2, #1
 8000cdc:	408a      	lsls	r2, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4a56      	ldr	r2, [pc, #344]	; (8000e3c <GPIO_init+0x344>)
 8000ce2:	430b      	orrs	r3, r1
 8000ce4:	6013      	str	r3, [r2, #0]



	}
	temp = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]

	/****Configure the pin speed****/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	799b      	ldrb	r3, [r3, #6]
 8000cee:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //to populate the correct two bits in the mode register
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	791b      	ldrb	r3, [r3, #4]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000cfa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	791b      	ldrb	r3, [r3, #4]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2103      	movs	r1, #3
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	4619      	mov	r1, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	400a      	ands	r2, r1
 8000d18:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6899      	ldr	r1, [r3, #8]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	430a      	orrs	r2, r1
 8000d28:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]

	/****Configure pull up or pull dowm resistors****/
	temp = (pGPIOHandle->GPIO_PinConfig.PinPuPdControl
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	79db      	ldrb	r3, [r3, #7]
 8000d32:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //to populate the correct two bits in the mode register
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	791b      	ldrb	r3, [r3, #4]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.PinPuPdControl
 8000d3e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68da      	ldr	r2, [r3, #12]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	791b      	ldrb	r3, [r3, #4]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	4619      	mov	r1, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	400a      	ands	r2, r1
 8000d5c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68d9      	ldr	r1, [r3, #12]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]

	/****Configure output type****/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7a1b      	ldrb	r3, [r3, #8]
 8000d76:	461a      	mov	r2, r3
			<< (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //to populate the correct two bits in the mode register
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	791b      	ldrb	r3, [r3, #4]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000d80:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	685a      	ldr	r2, [r3, #4]
			<< (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	2301      	movs	r3, #1
 8000d90:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000d92:	43db      	mvns	r3, r3
 8000d94:	4619      	mov	r1, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6859      	ldr	r1, [r3, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]

	/****Configure alternate function type****/
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT) {
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	795b      	ldrb	r3, [r3, #5]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d135      	bne.n	8000e26 <GPIO_init+0x32e>
		//Alternate functions being initialized
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; //Determining which alternate function register to go with
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
 8000dbe:	08db      	lsrs	r3, r3, #3
 8000dc0:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8; //the relative bit position in the register
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clear the 4 bits associated with the Pin Number
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	7c3b      	ldrb	r3, [r7, #16]
 8000dd2:	3308      	adds	r3, #8
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	210f      	movs	r1, #15
 8000de0:	fa01 f303 	lsl.w	r3, r1, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6819      	ldr	r1, [r3, #0]
 8000dec:	7c3b      	ldrb	r3, [r7, #16]
 8000dee:	4002      	ands	r2, r0
 8000df0:	3308      	adds	r3, #8
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	440b      	add	r3, r1
 8000df6:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	7c3b      	ldrb	r3, [r7, #16]
 8000dfe:	3308      	adds	r3, #8
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	685a      	ldr	r2, [r3, #4]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp2));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7a5b      	ldrb	r3, [r3, #9]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	4618      	mov	r0, r3
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6819      	ldr	r1, [r3, #0]
 8000e1a:	7c3b      	ldrb	r3, [r7, #16]
 8000e1c:	4302      	orrs	r2, r0
 8000e1e:	3308      	adds	r3, #8
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	605a      	str	r2, [r3, #4]

	}
}
 8000e26:	bf00      	nop
 8000e28:	371c      	adds	r7, #28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40013800 	.word	0x40013800
 8000e3c:	40013c00 	.word	0x40013c00

08000e40 <GPIO_ReadFromInputPin>:
}

/*
 * Reading and writing data
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	fa22 f303 	lsr.w	r3, r2, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
	return value;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <GPIO_WriteToOutputPin>:
	uint16_t value;
	value = (uint16_t) (pGPIOx->IDR);
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber,
		uint8_t value) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	70fb      	strb	r3, [r7, #3]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	70bb      	strb	r3, [r7, #2]
	if (value == GPIO_PIN_SET) {
 8000e7c:	78bb      	ldrb	r3, [r7, #2]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d109      	bne.n	8000e96 <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	78fa      	ldrb	r2, [r7, #3]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	615a      	str	r2, [r3, #20]
	} else {
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8000e94:	e009      	b.n	8000eaa <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	78fa      	ldrb	r2, [r7, #3]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea2:	43d2      	mvns	r2, r2
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	615a      	str	r2, [r3, #20]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <GPIO_WriteToOutputPort>:

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value) {
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	807b      	strh	r3, [r7, #2]
	pGPIOx->ODR = value;
 8000ec2:	887a      	ldrh	r2, [r7, #2]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	615a      	str	r2, [r3, #20]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000eda:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <RCC_GetPCLK1Value+0x9c>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000ee8:	7a7b      	ldrb	r3, [r7, #9]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <RCC_GetPCLK1Value+0xa0>)
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	e00b      	b.n	8000f0c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000ef4:	7a7b      	ldrb	r3, [r7, #9]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d102      	bne.n	8000f00 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <RCC_GetPCLK1Value+0xa4>)
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	e005      	b.n	8000f0c <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000f00:	7a7b      	ldrb	r3, [r7, #9]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d102      	bne.n	8000f0c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000f06:	f000 f88d 	bl	8001024 <RCC_GetPLLOutputClock>
 8000f0a:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <RCC_GetPCLK1Value+0x9c>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f003 030f 	and.w	r3, r3, #15
 8000f18:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000f1a:	7a3b      	ldrb	r3, [r7, #8]
 8000f1c:	2b07      	cmp	r3, #7
 8000f1e:	d802      	bhi.n	8000f26 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	72fb      	strb	r3, [r7, #11]
 8000f24:	e005      	b.n	8000f32 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000f26:	7a3b      	ldrb	r3, [r7, #8]
 8000f28:	3b08      	subs	r3, #8
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <RCC_GetPCLK1Value+0xa8>)
 8000f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f30:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <RCC_GetPCLK1Value+0x9c>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	0a9b      	lsrs	r3, r3, #10
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000f40:	7a3b      	ldrb	r3, [r7, #8]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d802      	bhi.n	8000f4c <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	72bb      	strb	r3, [r7, #10]
 8000f4a:	e004      	b.n	8000f56 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000f4c:	7a3b      	ldrb	r3, [r7, #8]
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <RCC_GetPCLK1Value+0xac>)
 8000f52:	5cd3      	ldrb	r3, [r2, r3]
 8000f54:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000f56:	7afb      	ldrb	r3, [r7, #11]
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f5e:	7abb      	ldrb	r3, [r7, #10]
 8000f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f64:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000f66:	687b      	ldr	r3, [r7, #4]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	00f42400 	.word	0x00f42400
 8000f78:	007a1200 	.word	0x007a1200
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	20000014 	.word	0x20000014

08000f84 <RCC_GetPCLK2Value>:
 * @return            -
 *
 * @Note              -
 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <RCC_GetPCLK2Value+0x8c>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000f9c:	7a7b      	ldrb	r3, [r7, #9]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <RCC_GetPCLK2Value+0x90>)
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e001      	b.n	8000fac <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <RCC_GetPCLK2Value+0x94>)
 8000faa:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <RCC_GetPCLK2Value+0x8c>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b07      	cmp	r3, #7
 8000fbc:	d802      	bhi.n	8000fc4 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	72fb      	strb	r3, [r7, #11]
 8000fc2:	e005      	b.n	8000fd0 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b08      	subs	r3, #8
 8000fc8:	4a14      	ldr	r2, [pc, #80]	; (800101c <RCC_GetPCLK2Value+0x98>)
 8000fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fce:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <RCC_GetPCLK2Value+0x8c>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	0b5b      	lsrs	r3, r3, #13
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d802      	bhi.n	8000fe8 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	72bb      	strb	r3, [r7, #10]
 8000fe6:	e004      	b.n	8000ff2 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b04      	subs	r3, #4
 8000fec:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <RCC_GetPCLK2Value+0x9c>)
 8000fee:	5cd3      	ldrb	r3, [r2, r3]
 8000ff0:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000ff2:	7afb      	ldrb	r3, [r7, #11]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ffa:	7abb      	ldrb	r3, [r7, #10]
 8000ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001000:	603b      	str	r3, [r7, #0]

	return pclk2;
 8001002:	683b      	ldr	r3, [r7, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40023800 	.word	0x40023800
 8001014:	00f42400 	.word	0x00f42400
 8001018:	007a1200 	.word	0x007a1200
 800101c:	20000004 	.word	0x20000004
 8001020:	20000014 	.word	0x20000014

08001024 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

	return 0;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <USART_SetBaudRate>:
 * @return            -
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if (pUSARTx == USART1 || pUSARTx == USART6) {
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a31      	ldr	r2, [pc, #196]	; (800110c <USART_SetBaudRate+0xd8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d003      	beq.n	8001052 <USART_SetBaudRate+0x1e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a30      	ldr	r2, [pc, #192]	; (8001110 <USART_SetBaudRate+0xdc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d103      	bne.n	800105a <USART_SetBaudRate+0x26>
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 8001052:	f7ff ff97 	bl	8000f84 <RCC_GetPCLK2Value>
 8001056:	61f8      	str	r0, [r7, #28]
 8001058:	e002      	b.n	8001060 <USART_SetBaudRate+0x2c>
	} else {
		PCLKx = RCC_GetPCLK1Value();
 800105a:	f7ff ff3b 	bl	8000ed4 <RCC_GetPCLK1Value>
 800105e:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if (pUSARTx->USART_CR1 & (1 << USART_CR1_OVER8)) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00b      	beq.n	8001084 <USART_SetBaudRate+0x50>
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009a      	lsls	r2, r3, #2
 8001076:	441a      	add	r2, r3
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	e00a      	b.n	800109a <USART_SetBaudRate+0x66>
	} else {
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	009a      	lsls	r2, r3, #2
 800108e:	441a      	add	r2, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	fbb2 f3f3 	udiv	r3, r2, r3
 8001098:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv / 100;
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <USART_SetBaudRate+0xe0>)
 800109e:	fba2 2303 	umull	r2, r3, r2, r3
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2264      	movs	r2, #100	; 0x64
 80010b4:	fb02 f303 	mul.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if (pUSARTx->USART_CR1 & (1 << USART_CR1_OVER8)) {
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00a      	beq.n	80010e0 <USART_SetBaudRate+0xac>
		//OVER8 = 1 , over sampling by 8
		F_part = (((F_part * 8) + 50) / 100) & ((uint8_t) 0x07);
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	3332      	adds	r3, #50	; 0x32
 80010d0:	4a10      	ldr	r2, [pc, #64]	; (8001114 <USART_SetBaudRate+0xe0>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e009      	b.n	80010f4 <USART_SetBaudRate+0xc0>

	} else {
		//over sampling by 16
		F_part = (((F_part * 16) + 50) / 100) & ((uint8_t) 0x0F);
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	011b      	lsls	r3, r3, #4
 80010e4:	3332      	adds	r3, #50	; 0x32
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <USART_SetBaudRate+0xe0>)
 80010e8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ec:	095b      	lsrs	r3, r3, #5
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->USART_BRR = tempreg;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	609a      	str	r2, [r3, #8]
}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40011000 	.word	0x40011000
 8001110:	40011400 	.word	0x40011400
 8001114:	51eb851f 	.word	0x51eb851f

08001118 <USART_PClkCtrl>:

void USART_PClkCtrl(USART_RegDef_t *pUSARTx, uint8_t State){
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d140      	bne.n	80011ac <USART_PClkCtrl+0x94>
		{
			if(pUSARTx == USART1)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a22      	ldr	r2, [pc, #136]	; (80011b8 <USART_PClkCtrl+0xa0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d106      	bne.n	8001140 <USART_PClkCtrl+0x28>
			{
				USART1_PCLK_EN();
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <USART_PClkCtrl+0xa4>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	4a21      	ldr	r2, [pc, #132]	; (80011bc <USART_PClkCtrl+0xa4>)
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	6453      	str	r3, [r2, #68]	; 0x44
			else if (pUSARTx == USART6)
			{
				USART6_PCLK_EN();
			}
		}
}
 800113e:	e035      	b.n	80011ac <USART_PClkCtrl+0x94>
			}else if (pUSARTx == USART2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a1f      	ldr	r2, [pc, #124]	; (80011c0 <USART_PClkCtrl+0xa8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d106      	bne.n	8001156 <USART_PClkCtrl+0x3e>
				USART2_PCLK_EN();
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <USART_PClkCtrl+0xa4>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <USART_PClkCtrl+0xa4>)
 800114e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001152:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001154:	e02a      	b.n	80011ac <USART_PClkCtrl+0x94>
			}else if (pUSARTx == USART3)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <USART_PClkCtrl+0xac>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d106      	bne.n	800116c <USART_PClkCtrl+0x54>
				USART3_PCLK_EN();
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <USART_PClkCtrl+0xa4>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <USART_PClkCtrl+0xa4>)
 8001164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
}
 800116a:	e01f      	b.n	80011ac <USART_PClkCtrl+0x94>
			else if (pUSARTx == UART4)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <USART_PClkCtrl+0xb0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d106      	bne.n	8001182 <USART_PClkCtrl+0x6a>
				UART4_PCLK_EN();
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <USART_PClkCtrl+0xa4>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	4a10      	ldr	r2, [pc, #64]	; (80011bc <USART_PClkCtrl+0xa4>)
 800117a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800117e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001180:	e014      	b.n	80011ac <USART_PClkCtrl+0x94>
			else if (pUSARTx == UART5)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a11      	ldr	r2, [pc, #68]	; (80011cc <USART_PClkCtrl+0xb4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d106      	bne.n	8001198 <USART_PClkCtrl+0x80>
				UART5_PCLK_EN();
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <USART_PClkCtrl+0xa4>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <USART_PClkCtrl+0xa4>)
 8001190:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001196:	e009      	b.n	80011ac <USART_PClkCtrl+0x94>
			else if (pUSARTx == USART6)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <USART_PClkCtrl+0xb8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d105      	bne.n	80011ac <USART_PClkCtrl+0x94>
				USART6_PCLK_EN();
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <USART_PClkCtrl+0xa4>)
 80011a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a4:	4a05      	ldr	r2, [pc, #20]	; (80011bc <USART_PClkCtrl+0xa4>)
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	6453      	str	r3, [r2, #68]	; 0x44
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40011000 	.word	0x40011000
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40004400 	.word	0x40004400
 80011c4:	40004800 	.word	0x40004800
 80011c8:	40004c00 	.word	0x40004c00
 80011cc:	40005000 	.word	0x40005000
 80011d0:	40011400 	.word	0x40011400

080011d4 <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
	 } else if (pUSARTHandle->pUSARTx == UART5) {
	 UART5_PCLK_EN();
	 } else if (pUSARTHandle->pUSARTx == USART6) {
	 USART6_PCLK_EN();
	 }*/
	USART_PClkCtrl(pUSARTHandle->pUSARTx, ENABLE);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff96 	bl	8001118 <USART_PClkCtrl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	791b      	ldrb	r3, [r3, #4]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d10c      	bne.n	800120e <USART_Init+0x3a>
		//Implement the code to enable the Receiver bit field
		tempreg |= (1 << USART_CR1_RE);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->USART_CR1 |= tempreg;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68d9      	ldr	r1, [r3, #12]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	430a      	orrs	r2, r1
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	e018      	b.n	8001240 <USART_Init+0x6c>
		//tempreg = 0;
	} else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	791b      	ldrb	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10c      	bne.n	8001230 <USART_Init+0x5c>
		//Implement the code to enable the Transmitter bit field
		tempreg |= (1 << USART_CR1_TE);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->USART_CR1 |= tempreg;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68d9      	ldr	r1, [r3, #12]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	430a      	orrs	r2, r1
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	e007      	b.n	8001240 <USART_Init+0x6c>
		//tempreg = 0;
	} else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	791b      	ldrb	r3, [r3, #4]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d103      	bne.n	8001240 <USART_Init+0x6c>
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE));
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f043 030c 	orr.w	r3, r3, #12
 800123e:	60fb      	str	r3, [r7, #12]
		//pUSARTHandle->pUSARTx->USART_CR1 |= tempreg;
		//tempreg = 0;
	}

	//Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7b5b      	ldrb	r3, [r3, #13]
 8001244:	031b      	lsls	r3, r3, #12
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
	//pUSARTHandle->pUSARTx->USART_CR1 |= tempreg;
	//tempreg = 0;

	//Configuration of parity control bit fields
	if (pUSARTHandle->USART_Config.USART_ParityControl
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7b9b      	ldrb	r3, [r3, #14]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d104      	bne.n	8001260 <USART_Init+0x8c>
			== USART_PARITY_EN_EVEN) {
		//Implement the code to enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	e00b      	b.n	8001278 <USART_Init+0xa4>
		//Not required because by default EVEN parity will be selected once you enable the parity control
		//tempreg |= (1 << 9);
		//pUSARTHandle->pUSARTx->USART_CR1 &= ~(tempreg);
		//tempreg = 0;

	} else if (pUSARTHandle->USART_Config.USART_ParityControl
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7b9b      	ldrb	r3, [r3, #14]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d107      	bne.n	8001278 <USART_Init+0xa4>
			== USART_PARITY_EN_ODD) {

		//Implement the code to enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126e:	60fb      	str	r3, [r7, #12]
		//pUSARTHandle->pUSARTx->USART_CR1 |= tempreg;
		//tempreg = 0;

		//Implement the code to enable ODD parity
		tempreg |= (1 << USART_CR1_PS);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001276:	60fb      	str	r3, [r7, #12]
		//tempreg = 0;

	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->USART_CR1 = tempreg;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	60da      	str	r2, [r3, #12]

	/******************************** Configuration of CR2******************************************/

	tempreg = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7b1b      	ldrb	r3, [r3, #12]
 8001288:	031b      	lsls	r3, r3, #12
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->USART_CR2 = tempreg;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	611a      	str	r2, [r3, #16]

	/******************************** Configuration of CR3******************************************/

	tempreg = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if (pUSARTHandle->USART_Config.USART_HWFlowControl
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7bdb      	ldrb	r3, [r3, #15]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d104      	bne.n	80012b0 <USART_Init+0xdc>
			== USART_HW_FLOW_CTRL_CTS) {
		//Implement the code to enable CTS flow control
		tempreg |= (1 << USART_CR3_CTSE);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e014      	b.n	80012da <USART_Init+0x106>

	} else if (pUSARTHandle->USART_Config.USART_HWFlowControl
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7bdb      	ldrb	r3, [r3, #15]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d104      	bne.n	80012c2 <USART_Init+0xee>
			== USART_HW_FLOW_CTRL_RTS) {
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	e00b      	b.n	80012da <USART_Init+0x106>

	} else if (pUSARTHandle->USART_Config.USART_HWFlowControl
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7bdb      	ldrb	r3, [r3, #15]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d107      	bne.n	80012da <USART_Init+0x106>
			== USART_HW_FLOW_CTRL_CTS_RTS) {
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= (1 << USART_CR3_CTSE);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d0:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR3_RTSE);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->USART_CR3 = tempreg;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	615a      	str	r2, [r3, #20]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4610      	mov	r0, r2
 80012ee:	f7ff fea1 	bl	8001034 <USART_SetBaudRate>
			pUSARTHandle->USART_Config.USART_Baud);
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <USART_PCtrl>:

void USART_PCtrl(USART_RegDef_t *pUSARTx, uint8_t State) {
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	460b      	mov	r3, r1
 8001304:	70fb      	strb	r3, [r7, #3]
	if (State == ENABLE) {
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d106      	bne.n	800131a <USART_PCtrl+0x20>
		pUSARTx->USART_CR1 |= (1 << 13);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60da      	str	r2, [r3, #12]
	} else {
		pUSARTx->USART_CR1 &= ~(1 << 13);
	}
}
 8001318:	e005      	b.n	8001326 <USART_PCtrl+0x2c>
		pUSARTx->USART_CR1 &= ~(1 << 13);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60da      	str	r2, [r3, #12]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer,
		uint32_t length) {
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
	//Loop over until "length" number of bytes are transferred
	for (uint32_t i = 0; i < length; i++) {
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	e031      	b.n	80013a8 <USART_SendData+0x76>
		//Implement the code to wait until TXE flag is set in the SR
		while (!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE))
 8001344:	bf00      	nop
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f83e 	bl	80013ce <USART_GetFlagStatus>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f6      	beq.n	8001346 <USART_SendData+0x14>
			;

		//Check the USART_Wordlengthgth item for 9BIT or 8BIT in a frame
		if (pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLENGTH_9) {
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	7b5b      	ldrb	r3, [r3, #13]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d118      	bne.n	8001392 <USART_SendData+0x60>
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->USART_DR = (*pdata & (uint16_t) 0x01FF);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001372:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if (pUSARTHandle->USART_Config.USART_ParityControl
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	7b9b      	ldrb	r3, [r3, #14]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d106      	bne.n	800138a <USART_SendData+0x58>
					== USART_PARITY_DISABLE) {
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	3301      	adds	r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	3301      	adds	r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	e00b      	b.n	80013a2 <USART_SendData+0x70>
			} else {
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3301      	adds	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	e007      	b.n	80013a2 <USART_SendData+0x70>
			}
		} else {
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->USART_DR = (*pTxBuffer & (uint8_t) 0xFF);
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	3301      	adds	r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < length; i++) {
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d3c9      	bcc.n	8001344 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while (!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC))
 80013b0:	bf00      	nop
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2140      	movs	r1, #64	; 0x40
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f808 	bl	80013ce <USART_GetFlagStatus>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f6      	beq.n	80013b2 <USART_SendData+0x80>
		;
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <USART_GetFlagStatus>:
 *
 * @return            -
 *
 * @Note              -
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName) {
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	70fb      	strb	r3, [r7, #3]
	if (pUSARTx->USART_SR & StatusFlagName) {
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <USART_GetFlagStatus+0x1c>
		return SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <USART_GetFlagStatus+0x1e>
	}

	return RESET;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <__errno>:
 80013f8:	4b01      	ldr	r3, [pc, #4]	; (8001400 <__errno+0x8>)
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000018 	.word	0x20000018

08001404 <__libc_init_array>:
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	4d0d      	ldr	r5, [pc, #52]	; (800143c <__libc_init_array+0x38>)
 8001408:	4c0d      	ldr	r4, [pc, #52]	; (8001440 <__libc_init_array+0x3c>)
 800140a:	1b64      	subs	r4, r4, r5
 800140c:	10a4      	asrs	r4, r4, #2
 800140e:	2600      	movs	r6, #0
 8001410:	42a6      	cmp	r6, r4
 8001412:	d109      	bne.n	8001428 <__libc_init_array+0x24>
 8001414:	4d0b      	ldr	r5, [pc, #44]	; (8001444 <__libc_init_array+0x40>)
 8001416:	4c0c      	ldr	r4, [pc, #48]	; (8001448 <__libc_init_array+0x44>)
 8001418:	f000 ffae 	bl	8002378 <_init>
 800141c:	1b64      	subs	r4, r4, r5
 800141e:	10a4      	asrs	r4, r4, #2
 8001420:	2600      	movs	r6, #0
 8001422:	42a6      	cmp	r6, r4
 8001424:	d105      	bne.n	8001432 <__libc_init_array+0x2e>
 8001426:	bd70      	pop	{r4, r5, r6, pc}
 8001428:	f855 3b04 	ldr.w	r3, [r5], #4
 800142c:	4798      	blx	r3
 800142e:	3601      	adds	r6, #1
 8001430:	e7ee      	b.n	8001410 <__libc_init_array+0xc>
 8001432:	f855 3b04 	ldr.w	r3, [r5], #4
 8001436:	4798      	blx	r3
 8001438:	3601      	adds	r6, #1
 800143a:	e7f2      	b.n	8001422 <__libc_init_array+0x1e>
 800143c:	0800243c 	.word	0x0800243c
 8001440:	0800243c 	.word	0x0800243c
 8001444:	0800243c 	.word	0x0800243c
 8001448:	08002440 	.word	0x08002440

0800144c <memset>:
 800144c:	4402      	add	r2, r0
 800144e:	4603      	mov	r3, r0
 8001450:	4293      	cmp	r3, r2
 8001452:	d100      	bne.n	8001456 <memset+0xa>
 8001454:	4770      	bx	lr
 8001456:	f803 1b01 	strb.w	r1, [r3], #1
 800145a:	e7f9      	b.n	8001450 <memset+0x4>

0800145c <iprintf>:
 800145c:	b40f      	push	{r0, r1, r2, r3}
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <iprintf+0x2c>)
 8001460:	b513      	push	{r0, r1, r4, lr}
 8001462:	681c      	ldr	r4, [r3, #0]
 8001464:	b124      	cbz	r4, 8001470 <iprintf+0x14>
 8001466:	69a3      	ldr	r3, [r4, #24]
 8001468:	b913      	cbnz	r3, 8001470 <iprintf+0x14>
 800146a:	4620      	mov	r0, r4
 800146c:	f000 f866 	bl	800153c <__sinit>
 8001470:	ab05      	add	r3, sp, #20
 8001472:	9a04      	ldr	r2, [sp, #16]
 8001474:	68a1      	ldr	r1, [r4, #8]
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	4620      	mov	r0, r4
 800147a:	f000 f9bd 	bl	80017f8 <_vfiprintf_r>
 800147e:	b002      	add	sp, #8
 8001480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001484:	b004      	add	sp, #16
 8001486:	4770      	bx	lr
 8001488:	20000018 	.word	0x20000018

0800148c <std>:
 800148c:	2300      	movs	r3, #0
 800148e:	b510      	push	{r4, lr}
 8001490:	4604      	mov	r4, r0
 8001492:	e9c0 3300 	strd	r3, r3, [r0]
 8001496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800149a:	6083      	str	r3, [r0, #8]
 800149c:	8181      	strh	r1, [r0, #12]
 800149e:	6643      	str	r3, [r0, #100]	; 0x64
 80014a0:	81c2      	strh	r2, [r0, #14]
 80014a2:	6183      	str	r3, [r0, #24]
 80014a4:	4619      	mov	r1, r3
 80014a6:	2208      	movs	r2, #8
 80014a8:	305c      	adds	r0, #92	; 0x5c
 80014aa:	f7ff ffcf 	bl	800144c <memset>
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <std+0x38>)
 80014b0:	6263      	str	r3, [r4, #36]	; 0x24
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <std+0x3c>)
 80014b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <std+0x40>)
 80014b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <std+0x44>)
 80014bc:	6224      	str	r4, [r4, #32]
 80014be:	6323      	str	r3, [r4, #48]	; 0x30
 80014c0:	bd10      	pop	{r4, pc}
 80014c2:	bf00      	nop
 80014c4:	08001da1 	.word	0x08001da1
 80014c8:	08001dc3 	.word	0x08001dc3
 80014cc:	08001dfb 	.word	0x08001dfb
 80014d0:	08001e1f 	.word	0x08001e1f

080014d4 <_cleanup_r>:
 80014d4:	4901      	ldr	r1, [pc, #4]	; (80014dc <_cleanup_r+0x8>)
 80014d6:	f000 b8af 	b.w	8001638 <_fwalk_reent>
 80014da:	bf00      	nop
 80014dc:	080020f9 	.word	0x080020f9

080014e0 <__sfmoreglue>:
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	2268      	movs	r2, #104	; 0x68
 80014e4:	1e4d      	subs	r5, r1, #1
 80014e6:	4355      	muls	r5, r2
 80014e8:	460e      	mov	r6, r1
 80014ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014ee:	f000 f8e5 	bl	80016bc <_malloc_r>
 80014f2:	4604      	mov	r4, r0
 80014f4:	b140      	cbz	r0, 8001508 <__sfmoreglue+0x28>
 80014f6:	2100      	movs	r1, #0
 80014f8:	e9c0 1600 	strd	r1, r6, [r0]
 80014fc:	300c      	adds	r0, #12
 80014fe:	60a0      	str	r0, [r4, #8]
 8001500:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001504:	f7ff ffa2 	bl	800144c <memset>
 8001508:	4620      	mov	r0, r4
 800150a:	bd70      	pop	{r4, r5, r6, pc}

0800150c <__sfp_lock_acquire>:
 800150c:	4801      	ldr	r0, [pc, #4]	; (8001514 <__sfp_lock_acquire+0x8>)
 800150e:	f000 b8b3 	b.w	8001678 <__retarget_lock_acquire_recursive>
 8001512:	bf00      	nop
 8001514:	20000141 	.word	0x20000141

08001518 <__sfp_lock_release>:
 8001518:	4801      	ldr	r0, [pc, #4]	; (8001520 <__sfp_lock_release+0x8>)
 800151a:	f000 b8ae 	b.w	800167a <__retarget_lock_release_recursive>
 800151e:	bf00      	nop
 8001520:	20000141 	.word	0x20000141

08001524 <__sinit_lock_acquire>:
 8001524:	4801      	ldr	r0, [pc, #4]	; (800152c <__sinit_lock_acquire+0x8>)
 8001526:	f000 b8a7 	b.w	8001678 <__retarget_lock_acquire_recursive>
 800152a:	bf00      	nop
 800152c:	20000142 	.word	0x20000142

08001530 <__sinit_lock_release>:
 8001530:	4801      	ldr	r0, [pc, #4]	; (8001538 <__sinit_lock_release+0x8>)
 8001532:	f000 b8a2 	b.w	800167a <__retarget_lock_release_recursive>
 8001536:	bf00      	nop
 8001538:	20000142 	.word	0x20000142

0800153c <__sinit>:
 800153c:	b510      	push	{r4, lr}
 800153e:	4604      	mov	r4, r0
 8001540:	f7ff fff0 	bl	8001524 <__sinit_lock_acquire>
 8001544:	69a3      	ldr	r3, [r4, #24]
 8001546:	b11b      	cbz	r3, 8001550 <__sinit+0x14>
 8001548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800154c:	f7ff bff0 	b.w	8001530 <__sinit_lock_release>
 8001550:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001554:	6523      	str	r3, [r4, #80]	; 0x50
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <__sinit+0x68>)
 8001558:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <__sinit+0x6c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	62a2      	str	r2, [r4, #40]	; 0x28
 800155e:	42a3      	cmp	r3, r4
 8001560:	bf04      	itt	eq
 8001562:	2301      	moveq	r3, #1
 8001564:	61a3      	streq	r3, [r4, #24]
 8001566:	4620      	mov	r0, r4
 8001568:	f000 f820 	bl	80015ac <__sfp>
 800156c:	6060      	str	r0, [r4, #4]
 800156e:	4620      	mov	r0, r4
 8001570:	f000 f81c 	bl	80015ac <__sfp>
 8001574:	60a0      	str	r0, [r4, #8]
 8001576:	4620      	mov	r0, r4
 8001578:	f000 f818 	bl	80015ac <__sfp>
 800157c:	2200      	movs	r2, #0
 800157e:	60e0      	str	r0, [r4, #12]
 8001580:	2104      	movs	r1, #4
 8001582:	6860      	ldr	r0, [r4, #4]
 8001584:	f7ff ff82 	bl	800148c <std>
 8001588:	68a0      	ldr	r0, [r4, #8]
 800158a:	2201      	movs	r2, #1
 800158c:	2109      	movs	r1, #9
 800158e:	f7ff ff7d 	bl	800148c <std>
 8001592:	68e0      	ldr	r0, [r4, #12]
 8001594:	2202      	movs	r2, #2
 8001596:	2112      	movs	r1, #18
 8001598:	f7ff ff78 	bl	800148c <std>
 800159c:	2301      	movs	r3, #1
 800159e:	61a3      	str	r3, [r4, #24]
 80015a0:	e7d2      	b.n	8001548 <__sinit+0xc>
 80015a2:	bf00      	nop
 80015a4:	080023a4 	.word	0x080023a4
 80015a8:	080014d5 	.word	0x080014d5

080015ac <__sfp>:
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ae:	4607      	mov	r7, r0
 80015b0:	f7ff ffac 	bl	800150c <__sfp_lock_acquire>
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <__sfp+0x84>)
 80015b6:	681e      	ldr	r6, [r3, #0]
 80015b8:	69b3      	ldr	r3, [r6, #24]
 80015ba:	b913      	cbnz	r3, 80015c2 <__sfp+0x16>
 80015bc:	4630      	mov	r0, r6
 80015be:	f7ff ffbd 	bl	800153c <__sinit>
 80015c2:	3648      	adds	r6, #72	; 0x48
 80015c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	d503      	bpl.n	80015d4 <__sfp+0x28>
 80015cc:	6833      	ldr	r3, [r6, #0]
 80015ce:	b30b      	cbz	r3, 8001614 <__sfp+0x68>
 80015d0:	6836      	ldr	r6, [r6, #0]
 80015d2:	e7f7      	b.n	80015c4 <__sfp+0x18>
 80015d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015d8:	b9d5      	cbnz	r5, 8001610 <__sfp+0x64>
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <__sfp+0x88>)
 80015dc:	60e3      	str	r3, [r4, #12]
 80015de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015e2:	6665      	str	r5, [r4, #100]	; 0x64
 80015e4:	f000 f847 	bl	8001676 <__retarget_lock_init_recursive>
 80015e8:	f7ff ff96 	bl	8001518 <__sfp_lock_release>
 80015ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80015f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80015f4:	6025      	str	r5, [r4, #0]
 80015f6:	61a5      	str	r5, [r4, #24]
 80015f8:	2208      	movs	r2, #8
 80015fa:	4629      	mov	r1, r5
 80015fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001600:	f7ff ff24 	bl	800144c <memset>
 8001604:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001608:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800160c:	4620      	mov	r0, r4
 800160e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001610:	3468      	adds	r4, #104	; 0x68
 8001612:	e7d9      	b.n	80015c8 <__sfp+0x1c>
 8001614:	2104      	movs	r1, #4
 8001616:	4638      	mov	r0, r7
 8001618:	f7ff ff62 	bl	80014e0 <__sfmoreglue>
 800161c:	4604      	mov	r4, r0
 800161e:	6030      	str	r0, [r6, #0]
 8001620:	2800      	cmp	r0, #0
 8001622:	d1d5      	bne.n	80015d0 <__sfp+0x24>
 8001624:	f7ff ff78 	bl	8001518 <__sfp_lock_release>
 8001628:	230c      	movs	r3, #12
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	e7ee      	b.n	800160c <__sfp+0x60>
 800162e:	bf00      	nop
 8001630:	080023a4 	.word	0x080023a4
 8001634:	ffff0001 	.word	0xffff0001

08001638 <_fwalk_reent>:
 8001638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800163c:	4606      	mov	r6, r0
 800163e:	4688      	mov	r8, r1
 8001640:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001644:	2700      	movs	r7, #0
 8001646:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800164a:	f1b9 0901 	subs.w	r9, r9, #1
 800164e:	d505      	bpl.n	800165c <_fwalk_reent+0x24>
 8001650:	6824      	ldr	r4, [r4, #0]
 8001652:	2c00      	cmp	r4, #0
 8001654:	d1f7      	bne.n	8001646 <_fwalk_reent+0xe>
 8001656:	4638      	mov	r0, r7
 8001658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800165c:	89ab      	ldrh	r3, [r5, #12]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d907      	bls.n	8001672 <_fwalk_reent+0x3a>
 8001662:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001666:	3301      	adds	r3, #1
 8001668:	d003      	beq.n	8001672 <_fwalk_reent+0x3a>
 800166a:	4629      	mov	r1, r5
 800166c:	4630      	mov	r0, r6
 800166e:	47c0      	blx	r8
 8001670:	4307      	orrs	r7, r0
 8001672:	3568      	adds	r5, #104	; 0x68
 8001674:	e7e9      	b.n	800164a <_fwalk_reent+0x12>

08001676 <__retarget_lock_init_recursive>:
 8001676:	4770      	bx	lr

08001678 <__retarget_lock_acquire_recursive>:
 8001678:	4770      	bx	lr

0800167a <__retarget_lock_release_recursive>:
 800167a:	4770      	bx	lr

0800167c <sbrk_aligned>:
 800167c:	b570      	push	{r4, r5, r6, lr}
 800167e:	4e0e      	ldr	r6, [pc, #56]	; (80016b8 <sbrk_aligned+0x3c>)
 8001680:	460c      	mov	r4, r1
 8001682:	6831      	ldr	r1, [r6, #0]
 8001684:	4605      	mov	r5, r0
 8001686:	b911      	cbnz	r1, 800168e <sbrk_aligned+0x12>
 8001688:	f000 fb7a 	bl	8001d80 <_sbrk_r>
 800168c:	6030      	str	r0, [r6, #0]
 800168e:	4621      	mov	r1, r4
 8001690:	4628      	mov	r0, r5
 8001692:	f000 fb75 	bl	8001d80 <_sbrk_r>
 8001696:	1c43      	adds	r3, r0, #1
 8001698:	d00a      	beq.n	80016b0 <sbrk_aligned+0x34>
 800169a:	1cc4      	adds	r4, r0, #3
 800169c:	f024 0403 	bic.w	r4, r4, #3
 80016a0:	42a0      	cmp	r0, r4
 80016a2:	d007      	beq.n	80016b4 <sbrk_aligned+0x38>
 80016a4:	1a21      	subs	r1, r4, r0
 80016a6:	4628      	mov	r0, r5
 80016a8:	f000 fb6a 	bl	8001d80 <_sbrk_r>
 80016ac:	3001      	adds	r0, #1
 80016ae:	d101      	bne.n	80016b4 <sbrk_aligned+0x38>
 80016b0:	f04f 34ff 	mov.w	r4, #4294967295
 80016b4:	4620      	mov	r0, r4
 80016b6:	bd70      	pop	{r4, r5, r6, pc}
 80016b8:	20000148 	.word	0x20000148

080016bc <_malloc_r>:
 80016bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016c0:	1ccd      	adds	r5, r1, #3
 80016c2:	f025 0503 	bic.w	r5, r5, #3
 80016c6:	3508      	adds	r5, #8
 80016c8:	2d0c      	cmp	r5, #12
 80016ca:	bf38      	it	cc
 80016cc:	250c      	movcc	r5, #12
 80016ce:	2d00      	cmp	r5, #0
 80016d0:	4607      	mov	r7, r0
 80016d2:	db01      	blt.n	80016d8 <_malloc_r+0x1c>
 80016d4:	42a9      	cmp	r1, r5
 80016d6:	d905      	bls.n	80016e4 <_malloc_r+0x28>
 80016d8:	230c      	movs	r3, #12
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	2600      	movs	r6, #0
 80016de:	4630      	mov	r0, r6
 80016e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016e4:	4e2e      	ldr	r6, [pc, #184]	; (80017a0 <_malloc_r+0xe4>)
 80016e6:	f000 fdbb 	bl	8002260 <__malloc_lock>
 80016ea:	6833      	ldr	r3, [r6, #0]
 80016ec:	461c      	mov	r4, r3
 80016ee:	bb34      	cbnz	r4, 800173e <_malloc_r+0x82>
 80016f0:	4629      	mov	r1, r5
 80016f2:	4638      	mov	r0, r7
 80016f4:	f7ff ffc2 	bl	800167c <sbrk_aligned>
 80016f8:	1c43      	adds	r3, r0, #1
 80016fa:	4604      	mov	r4, r0
 80016fc:	d14d      	bne.n	800179a <_malloc_r+0xde>
 80016fe:	6834      	ldr	r4, [r6, #0]
 8001700:	4626      	mov	r6, r4
 8001702:	2e00      	cmp	r6, #0
 8001704:	d140      	bne.n	8001788 <_malloc_r+0xcc>
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	4631      	mov	r1, r6
 800170a:	4638      	mov	r0, r7
 800170c:	eb04 0803 	add.w	r8, r4, r3
 8001710:	f000 fb36 	bl	8001d80 <_sbrk_r>
 8001714:	4580      	cmp	r8, r0
 8001716:	d13a      	bne.n	800178e <_malloc_r+0xd2>
 8001718:	6821      	ldr	r1, [r4, #0]
 800171a:	3503      	adds	r5, #3
 800171c:	1a6d      	subs	r5, r5, r1
 800171e:	f025 0503 	bic.w	r5, r5, #3
 8001722:	3508      	adds	r5, #8
 8001724:	2d0c      	cmp	r5, #12
 8001726:	bf38      	it	cc
 8001728:	250c      	movcc	r5, #12
 800172a:	4629      	mov	r1, r5
 800172c:	4638      	mov	r0, r7
 800172e:	f7ff ffa5 	bl	800167c <sbrk_aligned>
 8001732:	3001      	adds	r0, #1
 8001734:	d02b      	beq.n	800178e <_malloc_r+0xd2>
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	442b      	add	r3, r5
 800173a:	6023      	str	r3, [r4, #0]
 800173c:	e00e      	b.n	800175c <_malloc_r+0xa0>
 800173e:	6822      	ldr	r2, [r4, #0]
 8001740:	1b52      	subs	r2, r2, r5
 8001742:	d41e      	bmi.n	8001782 <_malloc_r+0xc6>
 8001744:	2a0b      	cmp	r2, #11
 8001746:	d916      	bls.n	8001776 <_malloc_r+0xba>
 8001748:	1961      	adds	r1, r4, r5
 800174a:	42a3      	cmp	r3, r4
 800174c:	6025      	str	r5, [r4, #0]
 800174e:	bf18      	it	ne
 8001750:	6059      	strne	r1, [r3, #4]
 8001752:	6863      	ldr	r3, [r4, #4]
 8001754:	bf08      	it	eq
 8001756:	6031      	streq	r1, [r6, #0]
 8001758:	5162      	str	r2, [r4, r5]
 800175a:	604b      	str	r3, [r1, #4]
 800175c:	4638      	mov	r0, r7
 800175e:	f104 060b 	add.w	r6, r4, #11
 8001762:	f000 fd83 	bl	800226c <__malloc_unlock>
 8001766:	f026 0607 	bic.w	r6, r6, #7
 800176a:	1d23      	adds	r3, r4, #4
 800176c:	1af2      	subs	r2, r6, r3
 800176e:	d0b6      	beq.n	80016de <_malloc_r+0x22>
 8001770:	1b9b      	subs	r3, r3, r6
 8001772:	50a3      	str	r3, [r4, r2]
 8001774:	e7b3      	b.n	80016de <_malloc_r+0x22>
 8001776:	6862      	ldr	r2, [r4, #4]
 8001778:	42a3      	cmp	r3, r4
 800177a:	bf0c      	ite	eq
 800177c:	6032      	streq	r2, [r6, #0]
 800177e:	605a      	strne	r2, [r3, #4]
 8001780:	e7ec      	b.n	800175c <_malloc_r+0xa0>
 8001782:	4623      	mov	r3, r4
 8001784:	6864      	ldr	r4, [r4, #4]
 8001786:	e7b2      	b.n	80016ee <_malloc_r+0x32>
 8001788:	4634      	mov	r4, r6
 800178a:	6876      	ldr	r6, [r6, #4]
 800178c:	e7b9      	b.n	8001702 <_malloc_r+0x46>
 800178e:	230c      	movs	r3, #12
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	4638      	mov	r0, r7
 8001794:	f000 fd6a 	bl	800226c <__malloc_unlock>
 8001798:	e7a1      	b.n	80016de <_malloc_r+0x22>
 800179a:	6025      	str	r5, [r4, #0]
 800179c:	e7de      	b.n	800175c <_malloc_r+0xa0>
 800179e:	bf00      	nop
 80017a0:	20000144 	.word	0x20000144

080017a4 <__sfputc_r>:
 80017a4:	6893      	ldr	r3, [r2, #8]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	b410      	push	{r4}
 80017ac:	6093      	str	r3, [r2, #8]
 80017ae:	da08      	bge.n	80017c2 <__sfputc_r+0x1e>
 80017b0:	6994      	ldr	r4, [r2, #24]
 80017b2:	42a3      	cmp	r3, r4
 80017b4:	db01      	blt.n	80017ba <__sfputc_r+0x16>
 80017b6:	290a      	cmp	r1, #10
 80017b8:	d103      	bne.n	80017c2 <__sfputc_r+0x1e>
 80017ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017be:	f000 bb33 	b.w	8001e28 <__swbuf_r>
 80017c2:	6813      	ldr	r3, [r2, #0]
 80017c4:	1c58      	adds	r0, r3, #1
 80017c6:	6010      	str	r0, [r2, #0]
 80017c8:	7019      	strb	r1, [r3, #0]
 80017ca:	4608      	mov	r0, r1
 80017cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <__sfputs_r>:
 80017d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d4:	4606      	mov	r6, r0
 80017d6:	460f      	mov	r7, r1
 80017d8:	4614      	mov	r4, r2
 80017da:	18d5      	adds	r5, r2, r3
 80017dc:	42ac      	cmp	r4, r5
 80017de:	d101      	bne.n	80017e4 <__sfputs_r+0x12>
 80017e0:	2000      	movs	r0, #0
 80017e2:	e007      	b.n	80017f4 <__sfputs_r+0x22>
 80017e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017e8:	463a      	mov	r2, r7
 80017ea:	4630      	mov	r0, r6
 80017ec:	f7ff ffda 	bl	80017a4 <__sfputc_r>
 80017f0:	1c43      	adds	r3, r0, #1
 80017f2:	d1f3      	bne.n	80017dc <__sfputs_r+0xa>
 80017f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017f8 <_vfiprintf_r>:
 80017f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017fc:	460d      	mov	r5, r1
 80017fe:	b09d      	sub	sp, #116	; 0x74
 8001800:	4614      	mov	r4, r2
 8001802:	4698      	mov	r8, r3
 8001804:	4606      	mov	r6, r0
 8001806:	b118      	cbz	r0, 8001810 <_vfiprintf_r+0x18>
 8001808:	6983      	ldr	r3, [r0, #24]
 800180a:	b90b      	cbnz	r3, 8001810 <_vfiprintf_r+0x18>
 800180c:	f7ff fe96 	bl	800153c <__sinit>
 8001810:	4b89      	ldr	r3, [pc, #548]	; (8001a38 <_vfiprintf_r+0x240>)
 8001812:	429d      	cmp	r5, r3
 8001814:	d11b      	bne.n	800184e <_vfiprintf_r+0x56>
 8001816:	6875      	ldr	r5, [r6, #4]
 8001818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800181a:	07d9      	lsls	r1, r3, #31
 800181c:	d405      	bmi.n	800182a <_vfiprintf_r+0x32>
 800181e:	89ab      	ldrh	r3, [r5, #12]
 8001820:	059a      	lsls	r2, r3, #22
 8001822:	d402      	bmi.n	800182a <_vfiprintf_r+0x32>
 8001824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001826:	f7ff ff27 	bl	8001678 <__retarget_lock_acquire_recursive>
 800182a:	89ab      	ldrh	r3, [r5, #12]
 800182c:	071b      	lsls	r3, r3, #28
 800182e:	d501      	bpl.n	8001834 <_vfiprintf_r+0x3c>
 8001830:	692b      	ldr	r3, [r5, #16]
 8001832:	b9eb      	cbnz	r3, 8001870 <_vfiprintf_r+0x78>
 8001834:	4629      	mov	r1, r5
 8001836:	4630      	mov	r0, r6
 8001838:	f000 fb5a 	bl	8001ef0 <__swsetup_r>
 800183c:	b1c0      	cbz	r0, 8001870 <_vfiprintf_r+0x78>
 800183e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001840:	07dc      	lsls	r4, r3, #31
 8001842:	d50e      	bpl.n	8001862 <_vfiprintf_r+0x6a>
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	b01d      	add	sp, #116	; 0x74
 800184a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800184e:	4b7b      	ldr	r3, [pc, #492]	; (8001a3c <_vfiprintf_r+0x244>)
 8001850:	429d      	cmp	r5, r3
 8001852:	d101      	bne.n	8001858 <_vfiprintf_r+0x60>
 8001854:	68b5      	ldr	r5, [r6, #8]
 8001856:	e7df      	b.n	8001818 <_vfiprintf_r+0x20>
 8001858:	4b79      	ldr	r3, [pc, #484]	; (8001a40 <_vfiprintf_r+0x248>)
 800185a:	429d      	cmp	r5, r3
 800185c:	bf08      	it	eq
 800185e:	68f5      	ldreq	r5, [r6, #12]
 8001860:	e7da      	b.n	8001818 <_vfiprintf_r+0x20>
 8001862:	89ab      	ldrh	r3, [r5, #12]
 8001864:	0598      	lsls	r0, r3, #22
 8001866:	d4ed      	bmi.n	8001844 <_vfiprintf_r+0x4c>
 8001868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800186a:	f7ff ff06 	bl	800167a <__retarget_lock_release_recursive>
 800186e:	e7e9      	b.n	8001844 <_vfiprintf_r+0x4c>
 8001870:	2300      	movs	r3, #0
 8001872:	9309      	str	r3, [sp, #36]	; 0x24
 8001874:	2320      	movs	r3, #32
 8001876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800187a:	f8cd 800c 	str.w	r8, [sp, #12]
 800187e:	2330      	movs	r3, #48	; 0x30
 8001880:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001a44 <_vfiprintf_r+0x24c>
 8001884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001888:	f04f 0901 	mov.w	r9, #1
 800188c:	4623      	mov	r3, r4
 800188e:	469a      	mov	sl, r3
 8001890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001894:	b10a      	cbz	r2, 800189a <_vfiprintf_r+0xa2>
 8001896:	2a25      	cmp	r2, #37	; 0x25
 8001898:	d1f9      	bne.n	800188e <_vfiprintf_r+0x96>
 800189a:	ebba 0b04 	subs.w	fp, sl, r4
 800189e:	d00b      	beq.n	80018b8 <_vfiprintf_r+0xc0>
 80018a0:	465b      	mov	r3, fp
 80018a2:	4622      	mov	r2, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	4630      	mov	r0, r6
 80018a8:	f7ff ff93 	bl	80017d2 <__sfputs_r>
 80018ac:	3001      	adds	r0, #1
 80018ae:	f000 80aa 	beq.w	8001a06 <_vfiprintf_r+0x20e>
 80018b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018b4:	445a      	add	r2, fp
 80018b6:	9209      	str	r2, [sp, #36]	; 0x24
 80018b8:	f89a 3000 	ldrb.w	r3, [sl]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80a2 	beq.w	8001a06 <_vfiprintf_r+0x20e>
 80018c2:	2300      	movs	r3, #0
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018cc:	f10a 0a01 	add.w	sl, sl, #1
 80018d0:	9304      	str	r3, [sp, #16]
 80018d2:	9307      	str	r3, [sp, #28]
 80018d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018d8:	931a      	str	r3, [sp, #104]	; 0x68
 80018da:	4654      	mov	r4, sl
 80018dc:	2205      	movs	r2, #5
 80018de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018e2:	4858      	ldr	r0, [pc, #352]	; (8001a44 <_vfiprintf_r+0x24c>)
 80018e4:	f7fe fc84 	bl	80001f0 <memchr>
 80018e8:	9a04      	ldr	r2, [sp, #16]
 80018ea:	b9d8      	cbnz	r0, 8001924 <_vfiprintf_r+0x12c>
 80018ec:	06d1      	lsls	r1, r2, #27
 80018ee:	bf44      	itt	mi
 80018f0:	2320      	movmi	r3, #32
 80018f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80018f6:	0713      	lsls	r3, r2, #28
 80018f8:	bf44      	itt	mi
 80018fa:	232b      	movmi	r3, #43	; 0x2b
 80018fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001900:	f89a 3000 	ldrb.w	r3, [sl]
 8001904:	2b2a      	cmp	r3, #42	; 0x2a
 8001906:	d015      	beq.n	8001934 <_vfiprintf_r+0x13c>
 8001908:	9a07      	ldr	r2, [sp, #28]
 800190a:	4654      	mov	r4, sl
 800190c:	2000      	movs	r0, #0
 800190e:	f04f 0c0a 	mov.w	ip, #10
 8001912:	4621      	mov	r1, r4
 8001914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001918:	3b30      	subs	r3, #48	; 0x30
 800191a:	2b09      	cmp	r3, #9
 800191c:	d94e      	bls.n	80019bc <_vfiprintf_r+0x1c4>
 800191e:	b1b0      	cbz	r0, 800194e <_vfiprintf_r+0x156>
 8001920:	9207      	str	r2, [sp, #28]
 8001922:	e014      	b.n	800194e <_vfiprintf_r+0x156>
 8001924:	eba0 0308 	sub.w	r3, r0, r8
 8001928:	fa09 f303 	lsl.w	r3, r9, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	9304      	str	r3, [sp, #16]
 8001930:	46a2      	mov	sl, r4
 8001932:	e7d2      	b.n	80018da <_vfiprintf_r+0xe2>
 8001934:	9b03      	ldr	r3, [sp, #12]
 8001936:	1d19      	adds	r1, r3, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	9103      	str	r1, [sp, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	bfbb      	ittet	lt
 8001940:	425b      	neglt	r3, r3
 8001942:	f042 0202 	orrlt.w	r2, r2, #2
 8001946:	9307      	strge	r3, [sp, #28]
 8001948:	9307      	strlt	r3, [sp, #28]
 800194a:	bfb8      	it	lt
 800194c:	9204      	strlt	r2, [sp, #16]
 800194e:	7823      	ldrb	r3, [r4, #0]
 8001950:	2b2e      	cmp	r3, #46	; 0x2e
 8001952:	d10c      	bne.n	800196e <_vfiprintf_r+0x176>
 8001954:	7863      	ldrb	r3, [r4, #1]
 8001956:	2b2a      	cmp	r3, #42	; 0x2a
 8001958:	d135      	bne.n	80019c6 <_vfiprintf_r+0x1ce>
 800195a:	9b03      	ldr	r3, [sp, #12]
 800195c:	1d1a      	adds	r2, r3, #4
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	9203      	str	r2, [sp, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	bfb8      	it	lt
 8001966:	f04f 33ff 	movlt.w	r3, #4294967295
 800196a:	3402      	adds	r4, #2
 800196c:	9305      	str	r3, [sp, #20]
 800196e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001a54 <_vfiprintf_r+0x25c>
 8001972:	7821      	ldrb	r1, [r4, #0]
 8001974:	2203      	movs	r2, #3
 8001976:	4650      	mov	r0, sl
 8001978:	f7fe fc3a 	bl	80001f0 <memchr>
 800197c:	b140      	cbz	r0, 8001990 <_vfiprintf_r+0x198>
 800197e:	2340      	movs	r3, #64	; 0x40
 8001980:	eba0 000a 	sub.w	r0, r0, sl
 8001984:	fa03 f000 	lsl.w	r0, r3, r0
 8001988:	9b04      	ldr	r3, [sp, #16]
 800198a:	4303      	orrs	r3, r0
 800198c:	3401      	adds	r4, #1
 800198e:	9304      	str	r3, [sp, #16]
 8001990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001994:	482c      	ldr	r0, [pc, #176]	; (8001a48 <_vfiprintf_r+0x250>)
 8001996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800199a:	2206      	movs	r2, #6
 800199c:	f7fe fc28 	bl	80001f0 <memchr>
 80019a0:	2800      	cmp	r0, #0
 80019a2:	d03f      	beq.n	8001a24 <_vfiprintf_r+0x22c>
 80019a4:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <_vfiprintf_r+0x254>)
 80019a6:	bb1b      	cbnz	r3, 80019f0 <_vfiprintf_r+0x1f8>
 80019a8:	9b03      	ldr	r3, [sp, #12]
 80019aa:	3307      	adds	r3, #7
 80019ac:	f023 0307 	bic.w	r3, r3, #7
 80019b0:	3308      	adds	r3, #8
 80019b2:	9303      	str	r3, [sp, #12]
 80019b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019b6:	443b      	add	r3, r7
 80019b8:	9309      	str	r3, [sp, #36]	; 0x24
 80019ba:	e767      	b.n	800188c <_vfiprintf_r+0x94>
 80019bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80019c0:	460c      	mov	r4, r1
 80019c2:	2001      	movs	r0, #1
 80019c4:	e7a5      	b.n	8001912 <_vfiprintf_r+0x11a>
 80019c6:	2300      	movs	r3, #0
 80019c8:	3401      	adds	r4, #1
 80019ca:	9305      	str	r3, [sp, #20]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f04f 0c0a 	mov.w	ip, #10
 80019d2:	4620      	mov	r0, r4
 80019d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019d8:	3a30      	subs	r2, #48	; 0x30
 80019da:	2a09      	cmp	r2, #9
 80019dc:	d903      	bls.n	80019e6 <_vfiprintf_r+0x1ee>
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0c5      	beq.n	800196e <_vfiprintf_r+0x176>
 80019e2:	9105      	str	r1, [sp, #20]
 80019e4:	e7c3      	b.n	800196e <_vfiprintf_r+0x176>
 80019e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80019ea:	4604      	mov	r4, r0
 80019ec:	2301      	movs	r3, #1
 80019ee:	e7f0      	b.n	80019d2 <_vfiprintf_r+0x1da>
 80019f0:	ab03      	add	r3, sp, #12
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	462a      	mov	r2, r5
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <_vfiprintf_r+0x258>)
 80019f8:	a904      	add	r1, sp, #16
 80019fa:	4630      	mov	r0, r6
 80019fc:	f3af 8000 	nop.w
 8001a00:	4607      	mov	r7, r0
 8001a02:	1c78      	adds	r0, r7, #1
 8001a04:	d1d6      	bne.n	80019b4 <_vfiprintf_r+0x1bc>
 8001a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a08:	07d9      	lsls	r1, r3, #31
 8001a0a:	d405      	bmi.n	8001a18 <_vfiprintf_r+0x220>
 8001a0c:	89ab      	ldrh	r3, [r5, #12]
 8001a0e:	059a      	lsls	r2, r3, #22
 8001a10:	d402      	bmi.n	8001a18 <_vfiprintf_r+0x220>
 8001a12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a14:	f7ff fe31 	bl	800167a <__retarget_lock_release_recursive>
 8001a18:	89ab      	ldrh	r3, [r5, #12]
 8001a1a:	065b      	lsls	r3, r3, #25
 8001a1c:	f53f af12 	bmi.w	8001844 <_vfiprintf_r+0x4c>
 8001a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a22:	e711      	b.n	8001848 <_vfiprintf_r+0x50>
 8001a24:	ab03      	add	r3, sp, #12
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	462a      	mov	r2, r5
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <_vfiprintf_r+0x258>)
 8001a2c:	a904      	add	r1, sp, #16
 8001a2e:	4630      	mov	r0, r6
 8001a30:	f000 f880 	bl	8001b34 <_printf_i>
 8001a34:	e7e4      	b.n	8001a00 <_vfiprintf_r+0x208>
 8001a36:	bf00      	nop
 8001a38:	080023c8 	.word	0x080023c8
 8001a3c:	080023e8 	.word	0x080023e8
 8001a40:	080023a8 	.word	0x080023a8
 8001a44:	08002408 	.word	0x08002408
 8001a48:	08002412 	.word	0x08002412
 8001a4c:	00000000 	.word	0x00000000
 8001a50:	080017d3 	.word	0x080017d3
 8001a54:	0800240e 	.word	0x0800240e

08001a58 <_printf_common>:
 8001a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a5c:	4616      	mov	r6, r2
 8001a5e:	4699      	mov	r9, r3
 8001a60:	688a      	ldr	r2, [r1, #8]
 8001a62:	690b      	ldr	r3, [r1, #16]
 8001a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	bfb8      	it	lt
 8001a6c:	4613      	movlt	r3, r2
 8001a6e:	6033      	str	r3, [r6, #0]
 8001a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a74:	4607      	mov	r7, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	b10a      	cbz	r2, 8001a7e <_printf_common+0x26>
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	6033      	str	r3, [r6, #0]
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	0699      	lsls	r1, r3, #26
 8001a82:	bf42      	ittt	mi
 8001a84:	6833      	ldrmi	r3, [r6, #0]
 8001a86:	3302      	addmi	r3, #2
 8001a88:	6033      	strmi	r3, [r6, #0]
 8001a8a:	6825      	ldr	r5, [r4, #0]
 8001a8c:	f015 0506 	ands.w	r5, r5, #6
 8001a90:	d106      	bne.n	8001aa0 <_printf_common+0x48>
 8001a92:	f104 0a19 	add.w	sl, r4, #25
 8001a96:	68e3      	ldr	r3, [r4, #12]
 8001a98:	6832      	ldr	r2, [r6, #0]
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	42ab      	cmp	r3, r5
 8001a9e:	dc26      	bgt.n	8001aee <_printf_common+0x96>
 8001aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001aa4:	1e13      	subs	r3, r2, #0
 8001aa6:	6822      	ldr	r2, [r4, #0]
 8001aa8:	bf18      	it	ne
 8001aaa:	2301      	movne	r3, #1
 8001aac:	0692      	lsls	r2, r2, #26
 8001aae:	d42b      	bmi.n	8001b08 <_printf_common+0xb0>
 8001ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ab4:	4649      	mov	r1, r9
 8001ab6:	4638      	mov	r0, r7
 8001ab8:	47c0      	blx	r8
 8001aba:	3001      	adds	r0, #1
 8001abc:	d01e      	beq.n	8001afc <_printf_common+0xa4>
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	68e5      	ldr	r5, [r4, #12]
 8001ac2:	6832      	ldr	r2, [r6, #0]
 8001ac4:	f003 0306 	and.w	r3, r3, #6
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	bf08      	it	eq
 8001acc:	1aad      	subeq	r5, r5, r2
 8001ace:	68a3      	ldr	r3, [r4, #8]
 8001ad0:	6922      	ldr	r2, [r4, #16]
 8001ad2:	bf0c      	ite	eq
 8001ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ad8:	2500      	movne	r5, #0
 8001ada:	4293      	cmp	r3, r2
 8001adc:	bfc4      	itt	gt
 8001ade:	1a9b      	subgt	r3, r3, r2
 8001ae0:	18ed      	addgt	r5, r5, r3
 8001ae2:	2600      	movs	r6, #0
 8001ae4:	341a      	adds	r4, #26
 8001ae6:	42b5      	cmp	r5, r6
 8001ae8:	d11a      	bne.n	8001b20 <_printf_common+0xc8>
 8001aea:	2000      	movs	r0, #0
 8001aec:	e008      	b.n	8001b00 <_printf_common+0xa8>
 8001aee:	2301      	movs	r3, #1
 8001af0:	4652      	mov	r2, sl
 8001af2:	4649      	mov	r1, r9
 8001af4:	4638      	mov	r0, r7
 8001af6:	47c0      	blx	r8
 8001af8:	3001      	adds	r0, #1
 8001afa:	d103      	bne.n	8001b04 <_printf_common+0xac>
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b04:	3501      	adds	r5, #1
 8001b06:	e7c6      	b.n	8001a96 <_printf_common+0x3e>
 8001b08:	18e1      	adds	r1, r4, r3
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	2030      	movs	r0, #48	; 0x30
 8001b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b12:	4422      	add	r2, r4
 8001b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	e7c7      	b.n	8001ab0 <_printf_common+0x58>
 8001b20:	2301      	movs	r3, #1
 8001b22:	4622      	mov	r2, r4
 8001b24:	4649      	mov	r1, r9
 8001b26:	4638      	mov	r0, r7
 8001b28:	47c0      	blx	r8
 8001b2a:	3001      	adds	r0, #1
 8001b2c:	d0e6      	beq.n	8001afc <_printf_common+0xa4>
 8001b2e:	3601      	adds	r6, #1
 8001b30:	e7d9      	b.n	8001ae6 <_printf_common+0x8e>
	...

08001b34 <_printf_i>:
 8001b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b38:	7e0f      	ldrb	r7, [r1, #24]
 8001b3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001b3c:	2f78      	cmp	r7, #120	; 0x78
 8001b3e:	4691      	mov	r9, r2
 8001b40:	4680      	mov	r8, r0
 8001b42:	460c      	mov	r4, r1
 8001b44:	469a      	mov	sl, r3
 8001b46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001b4a:	d807      	bhi.n	8001b5c <_printf_i+0x28>
 8001b4c:	2f62      	cmp	r7, #98	; 0x62
 8001b4e:	d80a      	bhi.n	8001b66 <_printf_i+0x32>
 8001b50:	2f00      	cmp	r7, #0
 8001b52:	f000 80d8 	beq.w	8001d06 <_printf_i+0x1d2>
 8001b56:	2f58      	cmp	r7, #88	; 0x58
 8001b58:	f000 80a3 	beq.w	8001ca2 <_printf_i+0x16e>
 8001b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b64:	e03a      	b.n	8001bdc <_printf_i+0xa8>
 8001b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b6a:	2b15      	cmp	r3, #21
 8001b6c:	d8f6      	bhi.n	8001b5c <_printf_i+0x28>
 8001b6e:	a101      	add	r1, pc, #4	; (adr r1, 8001b74 <_printf_i+0x40>)
 8001b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b74:	08001bcd 	.word	0x08001bcd
 8001b78:	08001be1 	.word	0x08001be1
 8001b7c:	08001b5d 	.word	0x08001b5d
 8001b80:	08001b5d 	.word	0x08001b5d
 8001b84:	08001b5d 	.word	0x08001b5d
 8001b88:	08001b5d 	.word	0x08001b5d
 8001b8c:	08001be1 	.word	0x08001be1
 8001b90:	08001b5d 	.word	0x08001b5d
 8001b94:	08001b5d 	.word	0x08001b5d
 8001b98:	08001b5d 	.word	0x08001b5d
 8001b9c:	08001b5d 	.word	0x08001b5d
 8001ba0:	08001ced 	.word	0x08001ced
 8001ba4:	08001c11 	.word	0x08001c11
 8001ba8:	08001ccf 	.word	0x08001ccf
 8001bac:	08001b5d 	.word	0x08001b5d
 8001bb0:	08001b5d 	.word	0x08001b5d
 8001bb4:	08001d0f 	.word	0x08001d0f
 8001bb8:	08001b5d 	.word	0x08001b5d
 8001bbc:	08001c11 	.word	0x08001c11
 8001bc0:	08001b5d 	.word	0x08001b5d
 8001bc4:	08001b5d 	.word	0x08001b5d
 8001bc8:	08001cd7 	.word	0x08001cd7
 8001bcc:	682b      	ldr	r3, [r5, #0]
 8001bce:	1d1a      	adds	r2, r3, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	602a      	str	r2, [r5, #0]
 8001bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0a3      	b.n	8001d28 <_printf_i+0x1f4>
 8001be0:	6820      	ldr	r0, [r4, #0]
 8001be2:	6829      	ldr	r1, [r5, #0]
 8001be4:	0606      	lsls	r6, r0, #24
 8001be6:	f101 0304 	add.w	r3, r1, #4
 8001bea:	d50a      	bpl.n	8001c02 <_printf_i+0xce>
 8001bec:	680e      	ldr	r6, [r1, #0]
 8001bee:	602b      	str	r3, [r5, #0]
 8001bf0:	2e00      	cmp	r6, #0
 8001bf2:	da03      	bge.n	8001bfc <_printf_i+0xc8>
 8001bf4:	232d      	movs	r3, #45	; 0x2d
 8001bf6:	4276      	negs	r6, r6
 8001bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bfc:	485e      	ldr	r0, [pc, #376]	; (8001d78 <_printf_i+0x244>)
 8001bfe:	230a      	movs	r3, #10
 8001c00:	e019      	b.n	8001c36 <_printf_i+0x102>
 8001c02:	680e      	ldr	r6, [r1, #0]
 8001c04:	602b      	str	r3, [r5, #0]
 8001c06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c0a:	bf18      	it	ne
 8001c0c:	b236      	sxthne	r6, r6
 8001c0e:	e7ef      	b.n	8001bf0 <_printf_i+0xbc>
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	6820      	ldr	r0, [r4, #0]
 8001c14:	1d19      	adds	r1, r3, #4
 8001c16:	6029      	str	r1, [r5, #0]
 8001c18:	0601      	lsls	r1, r0, #24
 8001c1a:	d501      	bpl.n	8001c20 <_printf_i+0xec>
 8001c1c:	681e      	ldr	r6, [r3, #0]
 8001c1e:	e002      	b.n	8001c26 <_printf_i+0xf2>
 8001c20:	0646      	lsls	r6, r0, #25
 8001c22:	d5fb      	bpl.n	8001c1c <_printf_i+0xe8>
 8001c24:	881e      	ldrh	r6, [r3, #0]
 8001c26:	4854      	ldr	r0, [pc, #336]	; (8001d78 <_printf_i+0x244>)
 8001c28:	2f6f      	cmp	r7, #111	; 0x6f
 8001c2a:	bf0c      	ite	eq
 8001c2c:	2308      	moveq	r3, #8
 8001c2e:	230a      	movne	r3, #10
 8001c30:	2100      	movs	r1, #0
 8001c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c36:	6865      	ldr	r5, [r4, #4]
 8001c38:	60a5      	str	r5, [r4, #8]
 8001c3a:	2d00      	cmp	r5, #0
 8001c3c:	bfa2      	ittt	ge
 8001c3e:	6821      	ldrge	r1, [r4, #0]
 8001c40:	f021 0104 	bicge.w	r1, r1, #4
 8001c44:	6021      	strge	r1, [r4, #0]
 8001c46:	b90e      	cbnz	r6, 8001c4c <_printf_i+0x118>
 8001c48:	2d00      	cmp	r5, #0
 8001c4a:	d04d      	beq.n	8001ce8 <_printf_i+0x1b4>
 8001c4c:	4615      	mov	r5, r2
 8001c4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001c52:	fb03 6711 	mls	r7, r3, r1, r6
 8001c56:	5dc7      	ldrb	r7, [r0, r7]
 8001c58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001c5c:	4637      	mov	r7, r6
 8001c5e:	42bb      	cmp	r3, r7
 8001c60:	460e      	mov	r6, r1
 8001c62:	d9f4      	bls.n	8001c4e <_printf_i+0x11a>
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d10b      	bne.n	8001c80 <_printf_i+0x14c>
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	07de      	lsls	r6, r3, #31
 8001c6c:	d508      	bpl.n	8001c80 <_printf_i+0x14c>
 8001c6e:	6923      	ldr	r3, [r4, #16]
 8001c70:	6861      	ldr	r1, [r4, #4]
 8001c72:	4299      	cmp	r1, r3
 8001c74:	bfde      	ittt	le
 8001c76:	2330      	movle	r3, #48	; 0x30
 8001c78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c80:	1b52      	subs	r2, r2, r5
 8001c82:	6122      	str	r2, [r4, #16]
 8001c84:	f8cd a000 	str.w	sl, [sp]
 8001c88:	464b      	mov	r3, r9
 8001c8a:	aa03      	add	r2, sp, #12
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	4640      	mov	r0, r8
 8001c90:	f7ff fee2 	bl	8001a58 <_printf_common>
 8001c94:	3001      	adds	r0, #1
 8001c96:	d14c      	bne.n	8001d32 <_printf_i+0x1fe>
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	b004      	add	sp, #16
 8001c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ca2:	4835      	ldr	r0, [pc, #212]	; (8001d78 <_printf_i+0x244>)
 8001ca4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001ca8:	6829      	ldr	r1, [r5, #0]
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	f851 6b04 	ldr.w	r6, [r1], #4
 8001cb0:	6029      	str	r1, [r5, #0]
 8001cb2:	061d      	lsls	r5, r3, #24
 8001cb4:	d514      	bpl.n	8001ce0 <_printf_i+0x1ac>
 8001cb6:	07df      	lsls	r7, r3, #31
 8001cb8:	bf44      	itt	mi
 8001cba:	f043 0320 	orrmi.w	r3, r3, #32
 8001cbe:	6023      	strmi	r3, [r4, #0]
 8001cc0:	b91e      	cbnz	r6, 8001cca <_printf_i+0x196>
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	f023 0320 	bic.w	r3, r3, #32
 8001cc8:	6023      	str	r3, [r4, #0]
 8001cca:	2310      	movs	r3, #16
 8001ccc:	e7b0      	b.n	8001c30 <_printf_i+0xfc>
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	f043 0320 	orr.w	r3, r3, #32
 8001cd4:	6023      	str	r3, [r4, #0]
 8001cd6:	2378      	movs	r3, #120	; 0x78
 8001cd8:	4828      	ldr	r0, [pc, #160]	; (8001d7c <_printf_i+0x248>)
 8001cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cde:	e7e3      	b.n	8001ca8 <_printf_i+0x174>
 8001ce0:	0659      	lsls	r1, r3, #25
 8001ce2:	bf48      	it	mi
 8001ce4:	b2b6      	uxthmi	r6, r6
 8001ce6:	e7e6      	b.n	8001cb6 <_printf_i+0x182>
 8001ce8:	4615      	mov	r5, r2
 8001cea:	e7bb      	b.n	8001c64 <_printf_i+0x130>
 8001cec:	682b      	ldr	r3, [r5, #0]
 8001cee:	6826      	ldr	r6, [r4, #0]
 8001cf0:	6961      	ldr	r1, [r4, #20]
 8001cf2:	1d18      	adds	r0, r3, #4
 8001cf4:	6028      	str	r0, [r5, #0]
 8001cf6:	0635      	lsls	r5, r6, #24
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	d501      	bpl.n	8001d00 <_printf_i+0x1cc>
 8001cfc:	6019      	str	r1, [r3, #0]
 8001cfe:	e002      	b.n	8001d06 <_printf_i+0x1d2>
 8001d00:	0670      	lsls	r0, r6, #25
 8001d02:	d5fb      	bpl.n	8001cfc <_printf_i+0x1c8>
 8001d04:	8019      	strh	r1, [r3, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	6123      	str	r3, [r4, #16]
 8001d0a:	4615      	mov	r5, r2
 8001d0c:	e7ba      	b.n	8001c84 <_printf_i+0x150>
 8001d0e:	682b      	ldr	r3, [r5, #0]
 8001d10:	1d1a      	adds	r2, r3, #4
 8001d12:	602a      	str	r2, [r5, #0]
 8001d14:	681d      	ldr	r5, [r3, #0]
 8001d16:	6862      	ldr	r2, [r4, #4]
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	f7fe fa68 	bl	80001f0 <memchr>
 8001d20:	b108      	cbz	r0, 8001d26 <_printf_i+0x1f2>
 8001d22:	1b40      	subs	r0, r0, r5
 8001d24:	6060      	str	r0, [r4, #4]
 8001d26:	6863      	ldr	r3, [r4, #4]
 8001d28:	6123      	str	r3, [r4, #16]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d30:	e7a8      	b.n	8001c84 <_printf_i+0x150>
 8001d32:	6923      	ldr	r3, [r4, #16]
 8001d34:	462a      	mov	r2, r5
 8001d36:	4649      	mov	r1, r9
 8001d38:	4640      	mov	r0, r8
 8001d3a:	47d0      	blx	sl
 8001d3c:	3001      	adds	r0, #1
 8001d3e:	d0ab      	beq.n	8001c98 <_printf_i+0x164>
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	079b      	lsls	r3, r3, #30
 8001d44:	d413      	bmi.n	8001d6e <_printf_i+0x23a>
 8001d46:	68e0      	ldr	r0, [r4, #12]
 8001d48:	9b03      	ldr	r3, [sp, #12]
 8001d4a:	4298      	cmp	r0, r3
 8001d4c:	bfb8      	it	lt
 8001d4e:	4618      	movlt	r0, r3
 8001d50:	e7a4      	b.n	8001c9c <_printf_i+0x168>
 8001d52:	2301      	movs	r3, #1
 8001d54:	4632      	mov	r2, r6
 8001d56:	4649      	mov	r1, r9
 8001d58:	4640      	mov	r0, r8
 8001d5a:	47d0      	blx	sl
 8001d5c:	3001      	adds	r0, #1
 8001d5e:	d09b      	beq.n	8001c98 <_printf_i+0x164>
 8001d60:	3501      	adds	r5, #1
 8001d62:	68e3      	ldr	r3, [r4, #12]
 8001d64:	9903      	ldr	r1, [sp, #12]
 8001d66:	1a5b      	subs	r3, r3, r1
 8001d68:	42ab      	cmp	r3, r5
 8001d6a:	dcf2      	bgt.n	8001d52 <_printf_i+0x21e>
 8001d6c:	e7eb      	b.n	8001d46 <_printf_i+0x212>
 8001d6e:	2500      	movs	r5, #0
 8001d70:	f104 0619 	add.w	r6, r4, #25
 8001d74:	e7f5      	b.n	8001d62 <_printf_i+0x22e>
 8001d76:	bf00      	nop
 8001d78:	08002419 	.word	0x08002419
 8001d7c:	0800242a 	.word	0x0800242a

08001d80 <_sbrk_r>:
 8001d80:	b538      	push	{r3, r4, r5, lr}
 8001d82:	4d06      	ldr	r5, [pc, #24]	; (8001d9c <_sbrk_r+0x1c>)
 8001d84:	2300      	movs	r3, #0
 8001d86:	4604      	mov	r4, r0
 8001d88:	4608      	mov	r0, r1
 8001d8a:	602b      	str	r3, [r5, #0]
 8001d8c:	f7fe fd3c 	bl	8000808 <_sbrk>
 8001d90:	1c43      	adds	r3, r0, #1
 8001d92:	d102      	bne.n	8001d9a <_sbrk_r+0x1a>
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	b103      	cbz	r3, 8001d9a <_sbrk_r+0x1a>
 8001d98:	6023      	str	r3, [r4, #0]
 8001d9a:	bd38      	pop	{r3, r4, r5, pc}
 8001d9c:	2000014c 	.word	0x2000014c

08001da0 <__sread>:
 8001da0:	b510      	push	{r4, lr}
 8001da2:	460c      	mov	r4, r1
 8001da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001da8:	f000 fab2 	bl	8002310 <_read_r>
 8001dac:	2800      	cmp	r0, #0
 8001dae:	bfab      	itete	ge
 8001db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001db2:	89a3      	ldrhlt	r3, [r4, #12]
 8001db4:	181b      	addge	r3, r3, r0
 8001db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001dba:	bfac      	ite	ge
 8001dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001dbe:	81a3      	strhlt	r3, [r4, #12]
 8001dc0:	bd10      	pop	{r4, pc}

08001dc2 <__swrite>:
 8001dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dc6:	461f      	mov	r7, r3
 8001dc8:	898b      	ldrh	r3, [r1, #12]
 8001dca:	05db      	lsls	r3, r3, #23
 8001dcc:	4605      	mov	r5, r0
 8001dce:	460c      	mov	r4, r1
 8001dd0:	4616      	mov	r6, r2
 8001dd2:	d505      	bpl.n	8001de0 <__swrite+0x1e>
 8001dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dd8:	2302      	movs	r3, #2
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f000 f9c8 	bl	8002170 <_lseek_r>
 8001de0:	89a3      	ldrh	r3, [r4, #12]
 8001de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dea:	81a3      	strh	r3, [r4, #12]
 8001dec:	4632      	mov	r2, r6
 8001dee:	463b      	mov	r3, r7
 8001df0:	4628      	mov	r0, r5
 8001df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001df6:	f000 b869 	b.w	8001ecc <_write_r>

08001dfa <__sseek>:
 8001dfa:	b510      	push	{r4, lr}
 8001dfc:	460c      	mov	r4, r1
 8001dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e02:	f000 f9b5 	bl	8002170 <_lseek_r>
 8001e06:	1c43      	adds	r3, r0, #1
 8001e08:	89a3      	ldrh	r3, [r4, #12]
 8001e0a:	bf15      	itete	ne
 8001e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e16:	81a3      	strheq	r3, [r4, #12]
 8001e18:	bf18      	it	ne
 8001e1a:	81a3      	strhne	r3, [r4, #12]
 8001e1c:	bd10      	pop	{r4, pc}

08001e1e <__sclose>:
 8001e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e22:	f000 b8d3 	b.w	8001fcc <_close_r>
	...

08001e28 <__swbuf_r>:
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	460e      	mov	r6, r1
 8001e2c:	4614      	mov	r4, r2
 8001e2e:	4605      	mov	r5, r0
 8001e30:	b118      	cbz	r0, 8001e3a <__swbuf_r+0x12>
 8001e32:	6983      	ldr	r3, [r0, #24]
 8001e34:	b90b      	cbnz	r3, 8001e3a <__swbuf_r+0x12>
 8001e36:	f7ff fb81 	bl	800153c <__sinit>
 8001e3a:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <__swbuf_r+0x98>)
 8001e3c:	429c      	cmp	r4, r3
 8001e3e:	d12b      	bne.n	8001e98 <__swbuf_r+0x70>
 8001e40:	686c      	ldr	r4, [r5, #4]
 8001e42:	69a3      	ldr	r3, [r4, #24]
 8001e44:	60a3      	str	r3, [r4, #8]
 8001e46:	89a3      	ldrh	r3, [r4, #12]
 8001e48:	071a      	lsls	r2, r3, #28
 8001e4a:	d52f      	bpl.n	8001eac <__swbuf_r+0x84>
 8001e4c:	6923      	ldr	r3, [r4, #16]
 8001e4e:	b36b      	cbz	r3, 8001eac <__swbuf_r+0x84>
 8001e50:	6923      	ldr	r3, [r4, #16]
 8001e52:	6820      	ldr	r0, [r4, #0]
 8001e54:	1ac0      	subs	r0, r0, r3
 8001e56:	6963      	ldr	r3, [r4, #20]
 8001e58:	b2f6      	uxtb	r6, r6
 8001e5a:	4283      	cmp	r3, r0
 8001e5c:	4637      	mov	r7, r6
 8001e5e:	dc04      	bgt.n	8001e6a <__swbuf_r+0x42>
 8001e60:	4621      	mov	r1, r4
 8001e62:	4628      	mov	r0, r5
 8001e64:	f000 f948 	bl	80020f8 <_fflush_r>
 8001e68:	bb30      	cbnz	r0, 8001eb8 <__swbuf_r+0x90>
 8001e6a:	68a3      	ldr	r3, [r4, #8]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	60a3      	str	r3, [r4, #8]
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	6022      	str	r2, [r4, #0]
 8001e76:	701e      	strb	r6, [r3, #0]
 8001e78:	6963      	ldr	r3, [r4, #20]
 8001e7a:	3001      	adds	r0, #1
 8001e7c:	4283      	cmp	r3, r0
 8001e7e:	d004      	beq.n	8001e8a <__swbuf_r+0x62>
 8001e80:	89a3      	ldrh	r3, [r4, #12]
 8001e82:	07db      	lsls	r3, r3, #31
 8001e84:	d506      	bpl.n	8001e94 <__swbuf_r+0x6c>
 8001e86:	2e0a      	cmp	r6, #10
 8001e88:	d104      	bne.n	8001e94 <__swbuf_r+0x6c>
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	4628      	mov	r0, r5
 8001e8e:	f000 f933 	bl	80020f8 <_fflush_r>
 8001e92:	b988      	cbnz	r0, 8001eb8 <__swbuf_r+0x90>
 8001e94:	4638      	mov	r0, r7
 8001e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <__swbuf_r+0x9c>)
 8001e9a:	429c      	cmp	r4, r3
 8001e9c:	d101      	bne.n	8001ea2 <__swbuf_r+0x7a>
 8001e9e:	68ac      	ldr	r4, [r5, #8]
 8001ea0:	e7cf      	b.n	8001e42 <__swbuf_r+0x1a>
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <__swbuf_r+0xa0>)
 8001ea4:	429c      	cmp	r4, r3
 8001ea6:	bf08      	it	eq
 8001ea8:	68ec      	ldreq	r4, [r5, #12]
 8001eaa:	e7ca      	b.n	8001e42 <__swbuf_r+0x1a>
 8001eac:	4621      	mov	r1, r4
 8001eae:	4628      	mov	r0, r5
 8001eb0:	f000 f81e 	bl	8001ef0 <__swsetup_r>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d0cb      	beq.n	8001e50 <__swbuf_r+0x28>
 8001eb8:	f04f 37ff 	mov.w	r7, #4294967295
 8001ebc:	e7ea      	b.n	8001e94 <__swbuf_r+0x6c>
 8001ebe:	bf00      	nop
 8001ec0:	080023c8 	.word	0x080023c8
 8001ec4:	080023e8 	.word	0x080023e8
 8001ec8:	080023a8 	.word	0x080023a8

08001ecc <_write_r>:
 8001ecc:	b538      	push	{r3, r4, r5, lr}
 8001ece:	4d07      	ldr	r5, [pc, #28]	; (8001eec <_write_r+0x20>)
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	4608      	mov	r0, r1
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	602a      	str	r2, [r5, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f7fe fc43 	bl	8000766 <_write>
 8001ee0:	1c43      	adds	r3, r0, #1
 8001ee2:	d102      	bne.n	8001eea <_write_r+0x1e>
 8001ee4:	682b      	ldr	r3, [r5, #0]
 8001ee6:	b103      	cbz	r3, 8001eea <_write_r+0x1e>
 8001ee8:	6023      	str	r3, [r4, #0]
 8001eea:	bd38      	pop	{r3, r4, r5, pc}
 8001eec:	2000014c 	.word	0x2000014c

08001ef0 <__swsetup_r>:
 8001ef0:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <__swsetup_r+0xcc>)
 8001ef2:	b570      	push	{r4, r5, r6, lr}
 8001ef4:	681d      	ldr	r5, [r3, #0]
 8001ef6:	4606      	mov	r6, r0
 8001ef8:	460c      	mov	r4, r1
 8001efa:	b125      	cbz	r5, 8001f06 <__swsetup_r+0x16>
 8001efc:	69ab      	ldr	r3, [r5, #24]
 8001efe:	b913      	cbnz	r3, 8001f06 <__swsetup_r+0x16>
 8001f00:	4628      	mov	r0, r5
 8001f02:	f7ff fb1b 	bl	800153c <__sinit>
 8001f06:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <__swsetup_r+0xd0>)
 8001f08:	429c      	cmp	r4, r3
 8001f0a:	d10f      	bne.n	8001f2c <__swsetup_r+0x3c>
 8001f0c:	686c      	ldr	r4, [r5, #4]
 8001f0e:	89a3      	ldrh	r3, [r4, #12]
 8001f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f14:	0719      	lsls	r1, r3, #28
 8001f16:	d42c      	bmi.n	8001f72 <__swsetup_r+0x82>
 8001f18:	06dd      	lsls	r5, r3, #27
 8001f1a:	d411      	bmi.n	8001f40 <__swsetup_r+0x50>
 8001f1c:	2309      	movs	r3, #9
 8001f1e:	6033      	str	r3, [r6, #0]
 8001f20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001f24:	81a3      	strh	r3, [r4, #12]
 8001f26:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2a:	e03e      	b.n	8001faa <__swsetup_r+0xba>
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <__swsetup_r+0xd4>)
 8001f2e:	429c      	cmp	r4, r3
 8001f30:	d101      	bne.n	8001f36 <__swsetup_r+0x46>
 8001f32:	68ac      	ldr	r4, [r5, #8]
 8001f34:	e7eb      	b.n	8001f0e <__swsetup_r+0x1e>
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <__swsetup_r+0xd8>)
 8001f38:	429c      	cmp	r4, r3
 8001f3a:	bf08      	it	eq
 8001f3c:	68ec      	ldreq	r4, [r5, #12]
 8001f3e:	e7e6      	b.n	8001f0e <__swsetup_r+0x1e>
 8001f40:	0758      	lsls	r0, r3, #29
 8001f42:	d512      	bpl.n	8001f6a <__swsetup_r+0x7a>
 8001f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f46:	b141      	cbz	r1, 8001f5a <__swsetup_r+0x6a>
 8001f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f4c:	4299      	cmp	r1, r3
 8001f4e:	d002      	beq.n	8001f56 <__swsetup_r+0x66>
 8001f50:	4630      	mov	r0, r6
 8001f52:	f000 f991 	bl	8002278 <_free_r>
 8001f56:	2300      	movs	r3, #0
 8001f58:	6363      	str	r3, [r4, #52]	; 0x34
 8001f5a:	89a3      	ldrh	r3, [r4, #12]
 8001f5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f60:	81a3      	strh	r3, [r4, #12]
 8001f62:	2300      	movs	r3, #0
 8001f64:	6063      	str	r3, [r4, #4]
 8001f66:	6923      	ldr	r3, [r4, #16]
 8001f68:	6023      	str	r3, [r4, #0]
 8001f6a:	89a3      	ldrh	r3, [r4, #12]
 8001f6c:	f043 0308 	orr.w	r3, r3, #8
 8001f70:	81a3      	strh	r3, [r4, #12]
 8001f72:	6923      	ldr	r3, [r4, #16]
 8001f74:	b94b      	cbnz	r3, 8001f8a <__swsetup_r+0x9a>
 8001f76:	89a3      	ldrh	r3, [r4, #12]
 8001f78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f80:	d003      	beq.n	8001f8a <__swsetup_r+0x9a>
 8001f82:	4621      	mov	r1, r4
 8001f84:	4630      	mov	r0, r6
 8001f86:	f000 f92b 	bl	80021e0 <__smakebuf_r>
 8001f8a:	89a0      	ldrh	r0, [r4, #12]
 8001f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f90:	f010 0301 	ands.w	r3, r0, #1
 8001f94:	d00a      	beq.n	8001fac <__swsetup_r+0xbc>
 8001f96:	2300      	movs	r3, #0
 8001f98:	60a3      	str	r3, [r4, #8]
 8001f9a:	6963      	ldr	r3, [r4, #20]
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	61a3      	str	r3, [r4, #24]
 8001fa0:	6923      	ldr	r3, [r4, #16]
 8001fa2:	b943      	cbnz	r3, 8001fb6 <__swsetup_r+0xc6>
 8001fa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001fa8:	d1ba      	bne.n	8001f20 <__swsetup_r+0x30>
 8001faa:	bd70      	pop	{r4, r5, r6, pc}
 8001fac:	0781      	lsls	r1, r0, #30
 8001fae:	bf58      	it	pl
 8001fb0:	6963      	ldrpl	r3, [r4, #20]
 8001fb2:	60a3      	str	r3, [r4, #8]
 8001fb4:	e7f4      	b.n	8001fa0 <__swsetup_r+0xb0>
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	e7f7      	b.n	8001faa <__swsetup_r+0xba>
 8001fba:	bf00      	nop
 8001fbc:	20000018 	.word	0x20000018
 8001fc0:	080023c8 	.word	0x080023c8
 8001fc4:	080023e8 	.word	0x080023e8
 8001fc8:	080023a8 	.word	0x080023a8

08001fcc <_close_r>:
 8001fcc:	b538      	push	{r3, r4, r5, lr}
 8001fce:	4d06      	ldr	r5, [pc, #24]	; (8001fe8 <_close_r+0x1c>)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	602b      	str	r3, [r5, #0]
 8001fd8:	f7fe fbe1 	bl	800079e <_close>
 8001fdc:	1c43      	adds	r3, r0, #1
 8001fde:	d102      	bne.n	8001fe6 <_close_r+0x1a>
 8001fe0:	682b      	ldr	r3, [r5, #0]
 8001fe2:	b103      	cbz	r3, 8001fe6 <_close_r+0x1a>
 8001fe4:	6023      	str	r3, [r4, #0]
 8001fe6:	bd38      	pop	{r3, r4, r5, pc}
 8001fe8:	2000014c 	.word	0x2000014c

08001fec <__sflush_r>:
 8001fec:	898a      	ldrh	r2, [r1, #12]
 8001fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ff2:	4605      	mov	r5, r0
 8001ff4:	0710      	lsls	r0, r2, #28
 8001ff6:	460c      	mov	r4, r1
 8001ff8:	d458      	bmi.n	80020ac <__sflush_r+0xc0>
 8001ffa:	684b      	ldr	r3, [r1, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	dc05      	bgt.n	800200c <__sflush_r+0x20>
 8002000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002002:	2b00      	cmp	r3, #0
 8002004:	dc02      	bgt.n	800200c <__sflush_r+0x20>
 8002006:	2000      	movs	r0, #0
 8002008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800200c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800200e:	2e00      	cmp	r6, #0
 8002010:	d0f9      	beq.n	8002006 <__sflush_r+0x1a>
 8002012:	2300      	movs	r3, #0
 8002014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002018:	682f      	ldr	r7, [r5, #0]
 800201a:	602b      	str	r3, [r5, #0]
 800201c:	d032      	beq.n	8002084 <__sflush_r+0x98>
 800201e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002020:	89a3      	ldrh	r3, [r4, #12]
 8002022:	075a      	lsls	r2, r3, #29
 8002024:	d505      	bpl.n	8002032 <__sflush_r+0x46>
 8002026:	6863      	ldr	r3, [r4, #4]
 8002028:	1ac0      	subs	r0, r0, r3
 800202a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800202c:	b10b      	cbz	r3, 8002032 <__sflush_r+0x46>
 800202e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002030:	1ac0      	subs	r0, r0, r3
 8002032:	2300      	movs	r3, #0
 8002034:	4602      	mov	r2, r0
 8002036:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002038:	6a21      	ldr	r1, [r4, #32]
 800203a:	4628      	mov	r0, r5
 800203c:	47b0      	blx	r6
 800203e:	1c43      	adds	r3, r0, #1
 8002040:	89a3      	ldrh	r3, [r4, #12]
 8002042:	d106      	bne.n	8002052 <__sflush_r+0x66>
 8002044:	6829      	ldr	r1, [r5, #0]
 8002046:	291d      	cmp	r1, #29
 8002048:	d82c      	bhi.n	80020a4 <__sflush_r+0xb8>
 800204a:	4a2a      	ldr	r2, [pc, #168]	; (80020f4 <__sflush_r+0x108>)
 800204c:	40ca      	lsrs	r2, r1
 800204e:	07d6      	lsls	r6, r2, #31
 8002050:	d528      	bpl.n	80020a4 <__sflush_r+0xb8>
 8002052:	2200      	movs	r2, #0
 8002054:	6062      	str	r2, [r4, #4]
 8002056:	04d9      	lsls	r1, r3, #19
 8002058:	6922      	ldr	r2, [r4, #16]
 800205a:	6022      	str	r2, [r4, #0]
 800205c:	d504      	bpl.n	8002068 <__sflush_r+0x7c>
 800205e:	1c42      	adds	r2, r0, #1
 8002060:	d101      	bne.n	8002066 <__sflush_r+0x7a>
 8002062:	682b      	ldr	r3, [r5, #0]
 8002064:	b903      	cbnz	r3, 8002068 <__sflush_r+0x7c>
 8002066:	6560      	str	r0, [r4, #84]	; 0x54
 8002068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800206a:	602f      	str	r7, [r5, #0]
 800206c:	2900      	cmp	r1, #0
 800206e:	d0ca      	beq.n	8002006 <__sflush_r+0x1a>
 8002070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002074:	4299      	cmp	r1, r3
 8002076:	d002      	beq.n	800207e <__sflush_r+0x92>
 8002078:	4628      	mov	r0, r5
 800207a:	f000 f8fd 	bl	8002278 <_free_r>
 800207e:	2000      	movs	r0, #0
 8002080:	6360      	str	r0, [r4, #52]	; 0x34
 8002082:	e7c1      	b.n	8002008 <__sflush_r+0x1c>
 8002084:	6a21      	ldr	r1, [r4, #32]
 8002086:	2301      	movs	r3, #1
 8002088:	4628      	mov	r0, r5
 800208a:	47b0      	blx	r6
 800208c:	1c41      	adds	r1, r0, #1
 800208e:	d1c7      	bne.n	8002020 <__sflush_r+0x34>
 8002090:	682b      	ldr	r3, [r5, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0c4      	beq.n	8002020 <__sflush_r+0x34>
 8002096:	2b1d      	cmp	r3, #29
 8002098:	d001      	beq.n	800209e <__sflush_r+0xb2>
 800209a:	2b16      	cmp	r3, #22
 800209c:	d101      	bne.n	80020a2 <__sflush_r+0xb6>
 800209e:	602f      	str	r7, [r5, #0]
 80020a0:	e7b1      	b.n	8002006 <__sflush_r+0x1a>
 80020a2:	89a3      	ldrh	r3, [r4, #12]
 80020a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020a8:	81a3      	strh	r3, [r4, #12]
 80020aa:	e7ad      	b.n	8002008 <__sflush_r+0x1c>
 80020ac:	690f      	ldr	r7, [r1, #16]
 80020ae:	2f00      	cmp	r7, #0
 80020b0:	d0a9      	beq.n	8002006 <__sflush_r+0x1a>
 80020b2:	0793      	lsls	r3, r2, #30
 80020b4:	680e      	ldr	r6, [r1, #0]
 80020b6:	bf08      	it	eq
 80020b8:	694b      	ldreq	r3, [r1, #20]
 80020ba:	600f      	str	r7, [r1, #0]
 80020bc:	bf18      	it	ne
 80020be:	2300      	movne	r3, #0
 80020c0:	eba6 0807 	sub.w	r8, r6, r7
 80020c4:	608b      	str	r3, [r1, #8]
 80020c6:	f1b8 0f00 	cmp.w	r8, #0
 80020ca:	dd9c      	ble.n	8002006 <__sflush_r+0x1a>
 80020cc:	6a21      	ldr	r1, [r4, #32]
 80020ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80020d0:	4643      	mov	r3, r8
 80020d2:	463a      	mov	r2, r7
 80020d4:	4628      	mov	r0, r5
 80020d6:	47b0      	blx	r6
 80020d8:	2800      	cmp	r0, #0
 80020da:	dc06      	bgt.n	80020ea <__sflush_r+0xfe>
 80020dc:	89a3      	ldrh	r3, [r4, #12]
 80020de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e2:	81a3      	strh	r3, [r4, #12]
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	e78e      	b.n	8002008 <__sflush_r+0x1c>
 80020ea:	4407      	add	r7, r0
 80020ec:	eba8 0800 	sub.w	r8, r8, r0
 80020f0:	e7e9      	b.n	80020c6 <__sflush_r+0xda>
 80020f2:	bf00      	nop
 80020f4:	20400001 	.word	0x20400001

080020f8 <_fflush_r>:
 80020f8:	b538      	push	{r3, r4, r5, lr}
 80020fa:	690b      	ldr	r3, [r1, #16]
 80020fc:	4605      	mov	r5, r0
 80020fe:	460c      	mov	r4, r1
 8002100:	b913      	cbnz	r3, 8002108 <_fflush_r+0x10>
 8002102:	2500      	movs	r5, #0
 8002104:	4628      	mov	r0, r5
 8002106:	bd38      	pop	{r3, r4, r5, pc}
 8002108:	b118      	cbz	r0, 8002112 <_fflush_r+0x1a>
 800210a:	6983      	ldr	r3, [r0, #24]
 800210c:	b90b      	cbnz	r3, 8002112 <_fflush_r+0x1a>
 800210e:	f7ff fa15 	bl	800153c <__sinit>
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <_fflush_r+0x6c>)
 8002114:	429c      	cmp	r4, r3
 8002116:	d11b      	bne.n	8002150 <_fflush_r+0x58>
 8002118:	686c      	ldr	r4, [r5, #4]
 800211a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ef      	beq.n	8002102 <_fflush_r+0xa>
 8002122:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002124:	07d0      	lsls	r0, r2, #31
 8002126:	d404      	bmi.n	8002132 <_fflush_r+0x3a>
 8002128:	0599      	lsls	r1, r3, #22
 800212a:	d402      	bmi.n	8002132 <_fflush_r+0x3a>
 800212c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800212e:	f7ff faa3 	bl	8001678 <__retarget_lock_acquire_recursive>
 8002132:	4628      	mov	r0, r5
 8002134:	4621      	mov	r1, r4
 8002136:	f7ff ff59 	bl	8001fec <__sflush_r>
 800213a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800213c:	07da      	lsls	r2, r3, #31
 800213e:	4605      	mov	r5, r0
 8002140:	d4e0      	bmi.n	8002104 <_fflush_r+0xc>
 8002142:	89a3      	ldrh	r3, [r4, #12]
 8002144:	059b      	lsls	r3, r3, #22
 8002146:	d4dd      	bmi.n	8002104 <_fflush_r+0xc>
 8002148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800214a:	f7ff fa96 	bl	800167a <__retarget_lock_release_recursive>
 800214e:	e7d9      	b.n	8002104 <_fflush_r+0xc>
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <_fflush_r+0x70>)
 8002152:	429c      	cmp	r4, r3
 8002154:	d101      	bne.n	800215a <_fflush_r+0x62>
 8002156:	68ac      	ldr	r4, [r5, #8]
 8002158:	e7df      	b.n	800211a <_fflush_r+0x22>
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <_fflush_r+0x74>)
 800215c:	429c      	cmp	r4, r3
 800215e:	bf08      	it	eq
 8002160:	68ec      	ldreq	r4, [r5, #12]
 8002162:	e7da      	b.n	800211a <_fflush_r+0x22>
 8002164:	080023c8 	.word	0x080023c8
 8002168:	080023e8 	.word	0x080023e8
 800216c:	080023a8 	.word	0x080023a8

08002170 <_lseek_r>:
 8002170:	b538      	push	{r3, r4, r5, lr}
 8002172:	4d07      	ldr	r5, [pc, #28]	; (8002190 <_lseek_r+0x20>)
 8002174:	4604      	mov	r4, r0
 8002176:	4608      	mov	r0, r1
 8002178:	4611      	mov	r1, r2
 800217a:	2200      	movs	r2, #0
 800217c:	602a      	str	r2, [r5, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	f7fe fb34 	bl	80007ec <_lseek>
 8002184:	1c43      	adds	r3, r0, #1
 8002186:	d102      	bne.n	800218e <_lseek_r+0x1e>
 8002188:	682b      	ldr	r3, [r5, #0]
 800218a:	b103      	cbz	r3, 800218e <_lseek_r+0x1e>
 800218c:	6023      	str	r3, [r4, #0]
 800218e:	bd38      	pop	{r3, r4, r5, pc}
 8002190:	2000014c 	.word	0x2000014c

08002194 <__swhatbuf_r>:
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	460e      	mov	r6, r1
 8002198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800219c:	2900      	cmp	r1, #0
 800219e:	b096      	sub	sp, #88	; 0x58
 80021a0:	4614      	mov	r4, r2
 80021a2:	461d      	mov	r5, r3
 80021a4:	da08      	bge.n	80021b8 <__swhatbuf_r+0x24>
 80021a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	602a      	str	r2, [r5, #0]
 80021ae:	061a      	lsls	r2, r3, #24
 80021b0:	d410      	bmi.n	80021d4 <__swhatbuf_r+0x40>
 80021b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b6:	e00e      	b.n	80021d6 <__swhatbuf_r+0x42>
 80021b8:	466a      	mov	r2, sp
 80021ba:	f000 f8bb 	bl	8002334 <_fstat_r>
 80021be:	2800      	cmp	r0, #0
 80021c0:	dbf1      	blt.n	80021a6 <__swhatbuf_r+0x12>
 80021c2:	9a01      	ldr	r2, [sp, #4]
 80021c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80021c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80021cc:	425a      	negs	r2, r3
 80021ce:	415a      	adcs	r2, r3
 80021d0:	602a      	str	r2, [r5, #0]
 80021d2:	e7ee      	b.n	80021b2 <__swhatbuf_r+0x1e>
 80021d4:	2340      	movs	r3, #64	; 0x40
 80021d6:	2000      	movs	r0, #0
 80021d8:	6023      	str	r3, [r4, #0]
 80021da:	b016      	add	sp, #88	; 0x58
 80021dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080021e0 <__smakebuf_r>:
 80021e0:	898b      	ldrh	r3, [r1, #12]
 80021e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021e4:	079d      	lsls	r5, r3, #30
 80021e6:	4606      	mov	r6, r0
 80021e8:	460c      	mov	r4, r1
 80021ea:	d507      	bpl.n	80021fc <__smakebuf_r+0x1c>
 80021ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80021f0:	6023      	str	r3, [r4, #0]
 80021f2:	6123      	str	r3, [r4, #16]
 80021f4:	2301      	movs	r3, #1
 80021f6:	6163      	str	r3, [r4, #20]
 80021f8:	b002      	add	sp, #8
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
 80021fc:	ab01      	add	r3, sp, #4
 80021fe:	466a      	mov	r2, sp
 8002200:	f7ff ffc8 	bl	8002194 <__swhatbuf_r>
 8002204:	9900      	ldr	r1, [sp, #0]
 8002206:	4605      	mov	r5, r0
 8002208:	4630      	mov	r0, r6
 800220a:	f7ff fa57 	bl	80016bc <_malloc_r>
 800220e:	b948      	cbnz	r0, 8002224 <__smakebuf_r+0x44>
 8002210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002214:	059a      	lsls	r2, r3, #22
 8002216:	d4ef      	bmi.n	80021f8 <__smakebuf_r+0x18>
 8002218:	f023 0303 	bic.w	r3, r3, #3
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	81a3      	strh	r3, [r4, #12]
 8002222:	e7e3      	b.n	80021ec <__smakebuf_r+0xc>
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <__smakebuf_r+0x7c>)
 8002226:	62b3      	str	r3, [r6, #40]	; 0x28
 8002228:	89a3      	ldrh	r3, [r4, #12]
 800222a:	6020      	str	r0, [r4, #0]
 800222c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002230:	81a3      	strh	r3, [r4, #12]
 8002232:	9b00      	ldr	r3, [sp, #0]
 8002234:	6163      	str	r3, [r4, #20]
 8002236:	9b01      	ldr	r3, [sp, #4]
 8002238:	6120      	str	r0, [r4, #16]
 800223a:	b15b      	cbz	r3, 8002254 <__smakebuf_r+0x74>
 800223c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002240:	4630      	mov	r0, r6
 8002242:	f000 f889 	bl	8002358 <_isatty_r>
 8002246:	b128      	cbz	r0, 8002254 <__smakebuf_r+0x74>
 8002248:	89a3      	ldrh	r3, [r4, #12]
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	81a3      	strh	r3, [r4, #12]
 8002254:	89a0      	ldrh	r0, [r4, #12]
 8002256:	4305      	orrs	r5, r0
 8002258:	81a5      	strh	r5, [r4, #12]
 800225a:	e7cd      	b.n	80021f8 <__smakebuf_r+0x18>
 800225c:	080014d5 	.word	0x080014d5

08002260 <__malloc_lock>:
 8002260:	4801      	ldr	r0, [pc, #4]	; (8002268 <__malloc_lock+0x8>)
 8002262:	f7ff ba09 	b.w	8001678 <__retarget_lock_acquire_recursive>
 8002266:	bf00      	nop
 8002268:	20000140 	.word	0x20000140

0800226c <__malloc_unlock>:
 800226c:	4801      	ldr	r0, [pc, #4]	; (8002274 <__malloc_unlock+0x8>)
 800226e:	f7ff ba04 	b.w	800167a <__retarget_lock_release_recursive>
 8002272:	bf00      	nop
 8002274:	20000140 	.word	0x20000140

08002278 <_free_r>:
 8002278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800227a:	2900      	cmp	r1, #0
 800227c:	d044      	beq.n	8002308 <_free_r+0x90>
 800227e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002282:	9001      	str	r0, [sp, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	f1a1 0404 	sub.w	r4, r1, #4
 800228a:	bfb8      	it	lt
 800228c:	18e4      	addlt	r4, r4, r3
 800228e:	f7ff ffe7 	bl	8002260 <__malloc_lock>
 8002292:	4a1e      	ldr	r2, [pc, #120]	; (800230c <_free_r+0x94>)
 8002294:	9801      	ldr	r0, [sp, #4]
 8002296:	6813      	ldr	r3, [r2, #0]
 8002298:	b933      	cbnz	r3, 80022a8 <_free_r+0x30>
 800229a:	6063      	str	r3, [r4, #4]
 800229c:	6014      	str	r4, [r2, #0]
 800229e:	b003      	add	sp, #12
 80022a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80022a4:	f7ff bfe2 	b.w	800226c <__malloc_unlock>
 80022a8:	42a3      	cmp	r3, r4
 80022aa:	d908      	bls.n	80022be <_free_r+0x46>
 80022ac:	6825      	ldr	r5, [r4, #0]
 80022ae:	1961      	adds	r1, r4, r5
 80022b0:	428b      	cmp	r3, r1
 80022b2:	bf01      	itttt	eq
 80022b4:	6819      	ldreq	r1, [r3, #0]
 80022b6:	685b      	ldreq	r3, [r3, #4]
 80022b8:	1949      	addeq	r1, r1, r5
 80022ba:	6021      	streq	r1, [r4, #0]
 80022bc:	e7ed      	b.n	800229a <_free_r+0x22>
 80022be:	461a      	mov	r2, r3
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	b10b      	cbz	r3, 80022c8 <_free_r+0x50>
 80022c4:	42a3      	cmp	r3, r4
 80022c6:	d9fa      	bls.n	80022be <_free_r+0x46>
 80022c8:	6811      	ldr	r1, [r2, #0]
 80022ca:	1855      	adds	r5, r2, r1
 80022cc:	42a5      	cmp	r5, r4
 80022ce:	d10b      	bne.n	80022e8 <_free_r+0x70>
 80022d0:	6824      	ldr	r4, [r4, #0]
 80022d2:	4421      	add	r1, r4
 80022d4:	1854      	adds	r4, r2, r1
 80022d6:	42a3      	cmp	r3, r4
 80022d8:	6011      	str	r1, [r2, #0]
 80022da:	d1e0      	bne.n	800229e <_free_r+0x26>
 80022dc:	681c      	ldr	r4, [r3, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	6053      	str	r3, [r2, #4]
 80022e2:	4421      	add	r1, r4
 80022e4:	6011      	str	r1, [r2, #0]
 80022e6:	e7da      	b.n	800229e <_free_r+0x26>
 80022e8:	d902      	bls.n	80022f0 <_free_r+0x78>
 80022ea:	230c      	movs	r3, #12
 80022ec:	6003      	str	r3, [r0, #0]
 80022ee:	e7d6      	b.n	800229e <_free_r+0x26>
 80022f0:	6825      	ldr	r5, [r4, #0]
 80022f2:	1961      	adds	r1, r4, r5
 80022f4:	428b      	cmp	r3, r1
 80022f6:	bf04      	itt	eq
 80022f8:	6819      	ldreq	r1, [r3, #0]
 80022fa:	685b      	ldreq	r3, [r3, #4]
 80022fc:	6063      	str	r3, [r4, #4]
 80022fe:	bf04      	itt	eq
 8002300:	1949      	addeq	r1, r1, r5
 8002302:	6021      	streq	r1, [r4, #0]
 8002304:	6054      	str	r4, [r2, #4]
 8002306:	e7ca      	b.n	800229e <_free_r+0x26>
 8002308:	b003      	add	sp, #12
 800230a:	bd30      	pop	{r4, r5, pc}
 800230c:	20000144 	.word	0x20000144

08002310 <_read_r>:
 8002310:	b538      	push	{r3, r4, r5, lr}
 8002312:	4d07      	ldr	r5, [pc, #28]	; (8002330 <_read_r+0x20>)
 8002314:	4604      	mov	r4, r0
 8002316:	4608      	mov	r0, r1
 8002318:	4611      	mov	r1, r2
 800231a:	2200      	movs	r2, #0
 800231c:	602a      	str	r2, [r5, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	f7fe fa04 	bl	800072c <_read>
 8002324:	1c43      	adds	r3, r0, #1
 8002326:	d102      	bne.n	800232e <_read_r+0x1e>
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	b103      	cbz	r3, 800232e <_read_r+0x1e>
 800232c:	6023      	str	r3, [r4, #0]
 800232e:	bd38      	pop	{r3, r4, r5, pc}
 8002330:	2000014c 	.word	0x2000014c

08002334 <_fstat_r>:
 8002334:	b538      	push	{r3, r4, r5, lr}
 8002336:	4d07      	ldr	r5, [pc, #28]	; (8002354 <_fstat_r+0x20>)
 8002338:	2300      	movs	r3, #0
 800233a:	4604      	mov	r4, r0
 800233c:	4608      	mov	r0, r1
 800233e:	4611      	mov	r1, r2
 8002340:	602b      	str	r3, [r5, #0]
 8002342:	f7fe fa38 	bl	80007b6 <_fstat>
 8002346:	1c43      	adds	r3, r0, #1
 8002348:	d102      	bne.n	8002350 <_fstat_r+0x1c>
 800234a:	682b      	ldr	r3, [r5, #0]
 800234c:	b103      	cbz	r3, 8002350 <_fstat_r+0x1c>
 800234e:	6023      	str	r3, [r4, #0]
 8002350:	bd38      	pop	{r3, r4, r5, pc}
 8002352:	bf00      	nop
 8002354:	2000014c 	.word	0x2000014c

08002358 <_isatty_r>:
 8002358:	b538      	push	{r3, r4, r5, lr}
 800235a:	4d06      	ldr	r5, [pc, #24]	; (8002374 <_isatty_r+0x1c>)
 800235c:	2300      	movs	r3, #0
 800235e:	4604      	mov	r4, r0
 8002360:	4608      	mov	r0, r1
 8002362:	602b      	str	r3, [r5, #0]
 8002364:	f7fe fa37 	bl	80007d6 <_isatty>
 8002368:	1c43      	adds	r3, r0, #1
 800236a:	d102      	bne.n	8002372 <_isatty_r+0x1a>
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	b103      	cbz	r3, 8002372 <_isatty_r+0x1a>
 8002370:	6023      	str	r3, [r4, #0]
 8002372:	bd38      	pop	{r3, r4, r5, pc}
 8002374:	2000014c 	.word	0x2000014c

08002378 <_init>:
 8002378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237a:	bf00      	nop
 800237c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237e:	bc08      	pop	{r3}
 8002380:	469e      	mov	lr, r3
 8002382:	4770      	bx	lr

08002384 <_fini>:
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002386:	bf00      	nop
 8002388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238a:	bc08      	pop	{r3}
 800238c:	469e      	mov	lr, r3
 800238e:	4770      	bx	lr
